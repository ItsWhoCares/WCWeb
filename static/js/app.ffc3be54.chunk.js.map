{"version":3,"sources":["colors.js","src/components/CustomInput/CustomInput.js","src/components/CustomButton/CustomButton.js","src/components/SocialSignInButtons/SocialSignInButtons.js","firebase.js","src/initSupabase.js","supabaseQueries.js","src/notification.js","src/screens/SignIn/SignIn.js","src/screens/SignUp/SignUp.js","src/screens/ConfirmEmail/ConfirmEmail.js","src/components/ChatListItem/ChatListItem.js","src/components/HomeHeader/index.js","src/components/SearchListItem/index.js","src/components/ChatInput/index.js","src/screens/Search/Search.js","src/components/Message/Message.js","src/components/CustomHeader/index.js","src/screens/ChatRoom/ChatRoom.js","src/screens/Home/Home.js","src/screens/ResetPassword/ResetPassword.js","src/screens/NewPassword/NewPassword.js","src/screens/Settings/Settings.js","src/components/Navigation/index.js","App.js","assets/images/WhoCares.png"],"names":["module","exports","myColors","pbgc","sbgc","secondaryText","PrimaryMessage","PrimaryMessagePressed","SecondaryMessage","SecondaryMessagePressed","inputBox","inputBoxText","inputBoxInsideText","primaryBtn","primaryBtnPressed","primaryBtnText","primaryBtnTextPressed","secondaryBtn","secondaryBtnPressed","secondaryBtnText","secondaryBtnTextPressed","containerPressed","styles","StyleSheet","create","container","backgroundColor","width","height","alignContent","justifyContent","paddingVertical","paddingHorizontal","marginVertical","marginBottom","borderRadius","container_error","borderWidth","borderColor","text","fontSize","color","CustomInput","control","name","secure","rules","placeholder","autoFocus","render","field","onChange","onBlur","value","error","fieldState","View","style","TextInput","onChangeText","placeholderTextColor","secureTextEntry","Text","alignSelf","message","container_PRIMARY","alignItems","padding","container_pressed_PRIMARY","container_SECONDARY","container_pressed_SECONDARY","text_PRIMARY","fontWeight","text_pressed_PRIMARY","text_SECONDARY","text_pressed_SECONDARY","CustomButton","onPress","type","bgC","fgC","icon","iconColor","addSpace","Pressable","pressed","FontAwesome","size","onSignInFacebookPressed","console","warn","onSignInGooglePressed","SocialSignInButtons","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","supabase","createClient","storage","AsyncStorage","autoRefreshToken","persistSession","detectSessionInUrl","getMessageByID","id","from","select","eq","data","log","addUser","status","image","Math","floor","random","length","res","insert","listUsers","getUserByID","createChatRoom","user1","user2","LastMessageID","UserID","ChatRoomID","listUserChatRooms","allChatRooms","in","map","chatRoom","chatRooms","err","chatRooms1","filter","User","ChatRoom","messages","err1","forEach","find","LastMessage","getChatRoomByID","createMessage","isMedia","ReplyMessageID","deleteMessage","remove","error2","update","data1","error1","updateChatRoomLastMessage","listMessagesByChatRoom","noLimit","order","ascending","limit","getCommonChatRoom","authUserID","otherUserID","addUserPushToken","currentUser","uid","PushToken","Device","Notifications","updateUserChatRoomLastSeen","LastSeenMessageID","LastSeenAt","Date","getUserChatRoomLastSeen","updateUserChatRoomLastSeenAt","JSON","stringify","MessageID","registerForPushNotificationsAsync","existingStatus","finalStatus","alert","token","Platform","OS","importance","MAX","vibrationPattern","lightColor","sendPushNotification","message1","to","sound","title","body","fetch","mode","method","headers","root","logo","maxWidth","maxHeight","logoText","forgot","textAlign","social","signup","SignIn","route","useRoute","useState","loading","setLoading","useForm","defaultValues","email","params","handleSubmit","navigation","useNavigation","onSignInPressed","response","signInWithEmailAndPassword","trim","password","user","emailVerified","Alert","displayName","navigate","useWindowDimensions","required","minLength","EMAIL_REGEX","onPrivacyPressed","link","margin","SignUp","pwd","watch","onRegisterPressed","userData","createUserWithEmailAndPassword","updateProfile","photoURL","sendEmailVerification","signOut","maxLength","pattern","validate","flex","textDecorationLine","textDecorationColor","btnContainer","flexDirection","ConfirmEmail","onConfirmPressed","Auth","confirmSignUp","code","popToTop","onResendPressed","resendSignUp","dayjs","extend","relativeTime","marginHorizontal","content","borderBottomWidth","hairlineWidth","borderBottomColor","marginRight","row","time","ChatListItem","chat","otherUser","setChatRoom","useEffect","fetchUser","subscription","channel","on","event","schema","table","payload","new","newChatRoom","newMsg","subscribe","removeChannel","Image","source","uri","numberOfLines","created_at","fromNow","left","right","marginLeft","HomeHeader","onSettingsPressed","AntDesign","subTitle","SearchListItem","authUser","setAuthUser","userInfo","commonChatRoom","newChatRoomData","undefined","createdAt","inputContainer","input","paddingTop","button","replyContainer","borderTopWidth","paddingLeft","reply","iconClose","_uploadImage","chatRoomID","oUserID","ext","substring","lastIndexOf","base64","buffer","decode","filename","upload","contentType","path","mes","ChatInput","onTyping","replying","handleReplyingCancel","setMessage","handleSend","newMessageData","notificationMessage","handleImagePick","result","ImagePicker","mediaTypes","All","allowsEditing","aspect","quality","canceled","assets","max","min","split","returnKeyType","onSubmitEditing","multiline","MaterialIcons","Search","React","users","setUsers","fetchUsers","e","useLayoutEffect","setOptions","headerShown","headerTitle","headerStyle","headerLeft","goBack","filteredUsers","item","toLowerCase","includes","querySearchText","FlatList","renderItem","onRefresh","refreshing","minWidth","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","paddingBottom","paddingRight","SwipeTime","myMsg","borderBottomRightRadius","borderBottomLeftRadius","myMsgPressed","otherMsg","otherMsgPressed","myReplyMsgContainer","otherReplyMsgContainer","myReplyMsg","opacity","otherReplyMsg","replyMsgText","replyText","memo","handleReplying","rerender","setRerender","swipeComponent","useRef","isMyMessage","_isMedia","_handleDeleteMessage","cancelable","_handleReply","current","close","swipeContent","format","ref","renderRightActions","renderLeftActions","overshootFriction","onSwipeableWillOpen","onLongPress","progressiveRenderingEnabled","resizeMethod","getPublicUrl","publicUrl","isMyReplyMessage","ReplyMessage","whoReplied","overshootLeft","overshootRight","online","lastSeen","CustomHeader","iter","oUser","isAdmin","getTypingMessage","userOnline","setUserOnline","lastSeenAt","setLastSeenAt","isTyping","setIsTyping","msg","setMsg","fetchLastSeen","who","inter","config","presence","key","onlineUsers","presenceState","ID","temp","hasOwnProperty","getTime","online_at","setInterval","track","clearInterval","userID","clearTimeout","setTimeout","list","header","chatRoomId","setMessages","setReplying","then","fetchMessages","messagesData","lmsgOuser","prevMessages","index","findIndex","updatedMessages","removeAllChannels","chatInput","send","_handleFocus","state","sub","AppState","addEventListener","useCallback","ActivityIndicator","showsVerticalScrollIndicator","inverted","estimatedItemSize","drawDistance","emptyChats","noChat","homeleft","homeleftHeader","noChatRoom","Home","appState","currentState","_handleAppStateChange","nextAppState","match","selectedChatRoom","setSelectedChatRoom","setChatRooms","headerTintColor","headerTitleAlign","headerRight","fetchChatRooms","sortedRooms","sort","a","b","ScrollView","contentContainerStyle","refreshControl","RefreshControl","minHeight","extraData","ResetPassword","onSendPressed","sendPasswordResetEmail","NewPassword","onSubmitPressed","imageContainer","icon1","icon2","Settings","setUser","setName","setStatus","setImage","selecting","setSelecting","refInputName","onSignOutPressed","headerBackTitle","handelImageChange","handelStatusChange","handelNameChange","marginTop","numColumns","columnWrapperStyle","focus","FontAwesome5","Feather","Navigation","checkUser","onAuthStateChanged","u","Stack","createNativeStackNavigator","NavigationContainer","Navigator","screenOptions","Screen","component","options","App","LogBox","ignoreLogs","NavigationBar","SafeAreaView","StatusBar","barStyle"],"mappings":"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","file":"static/js/app.ffc3be54.chunk.js","sourcesContent":["module.exports.myColors = {\r\n  pbgc: \"black\",\r\n  sbgc: \"black\",\r\n  secondaryText: \"#707271\",\r\n  PrimaryMessage: \"#f6c445\", //\"#fccc63\", //\"#4c68d7\",\r\n  PrimaryMessagePressed: \"#ffd859\",\r\n\r\n  SecondaryMessage: \"#303134\",\r\n  SecondaryMessagePressed: \"#444548\",\r\n  inputBox: \"#303134\",\r\n  inputBoxText: \"white\",\r\n  inputBoxInsideText: \"#707271\",\r\n  primaryBtn: \"#0095F6\",\r\n  primaryBtnPressed: \"#4CB5F9\",\r\n  primaryBtnText: \"white\",\r\n  primaryBtnTextPressed: \"white\",\r\n  secondaryBtn: \"#30475E\",\r\n  secondaryBtnPressed: \"#303134\",\r\n  secondaryBtnText: \"#0095F6\",\r\n  secondaryBtnTextPressed: \"#0095F6\",\r\n  containerPressed: \"#1e1e1e\",\r\n};\r\n\r\n// module.exports.myColors = {\r\n//   pbgc: \"#222831\",\r\n//   sbgc: \"#30475e\",\r\n//   input: \"#515268\",\r\n//   primaryBtn: \"#222831\",\r\n//   primaryBtnPressed: \"#ddd\",\r\n//   primaryBtnText: \"white\",\r\n//   primaryBtnTextPressed: \"#222831\",\r\n// };\r\n","import { View, Text, TextInput, StyleSheet } from \"react-native\";\r\nimport React from \"react\";\r\nimport { myColors } from \"../../../colors\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport { Platform } from \"expo-modules-core\";\r\n\r\nconst CustomInput = ({\r\n  control,\r\n  name,\r\n  secure,\r\n  rules = {},\r\n  placeholder,\r\n  autoFocus = false,\r\n}) => {\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      name={name}\r\n      render={({\r\n        field: { onChange, onBlur, value },\r\n        fieldState: { error },\r\n      }) => (\r\n        <>\r\n          <View style={[styles.container, error ? styles.container_error : {}]}>\r\n            <TextInput\r\n              \r\n              autoFocus={autoFocus}\r\n              style={styles.text}\r\n              onBlur={onBlur}\r\n              onChangeText={onChange}\r\n              value={value}\r\n              placeholder={placeholder}\r\n              placeholderTextColor={myColors.inputBoxInsideText}\r\n              secureTextEntry={secure}\r\n            />\r\n          </View>\r\n          {error && (\r\n            <Text style={{ color: \"red\", alignSelf: \"stretch\" }}>\r\n              {error.message || \"error\"}\r\n            </Text>\r\n          )}\r\n        </>\r\n      )}\r\n      rules={rules}\r\n    />\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: myColors.inputBox,\r\n    width: \"100%\",\r\n    height: 50,\r\n    alignContent: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    marginVertical: 5,\r\n\r\n    // paddingVertical: 20,\r\n    // paddingHorizontal: 20,\r\n    // marginVertical: 5,\r\n    marginBottom: 10,\r\n    borderRadius: 5,\r\n  },\r\n  container_error: {\r\n    borderWidth: 1,\r\n    borderColor: \"red\",\r\n  },\r\n\r\n  text: {\r\n    fontSize: 15,\r\n    color: myColors.inputBoxText,\r\n    borderColor: myColors.inputBox,\r\n    // fontFamily: \"Rubik_400Regular\",\r\n  },\r\n});\r\n\r\nexport default CustomInput;\r\n","import { View, Text, StyleSheet, Pressable } from \"react-native\";\r\nimport React from \"react\";\r\nimport { myColors } from \"../../../colors\";\r\n\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\n\r\nconst CustomButton = ({\r\n  onPress,\r\n  text,\r\n  type = \"PRIMARY\",\r\n  bgC,\r\n  fgC,\r\n  icon,\r\n  iconColor,\r\n}) => {\r\n  let addSpace = \"\";\r\n  if (icon) addSpace = \"    \";\r\n\r\n  return (\r\n    <Pressable\r\n      onPress={onPress}\r\n      style={({ pressed }) =>\r\n        pressed\r\n          ? [\r\n              styles[`container_pressed_${type}`],\r\n              bgC ? { backgroundColor: bgC } : {},\r\n            ]\r\n          : [styles[`container_${type}`], bgC ? { backgroundColor: bgC } : {}]\r\n      }>\r\n      {({ pressed }) => (\r\n        <Text\r\n          style={[\r\n            pressed\r\n              ? [styles[`text_pressed_${type}`], fgC ? { color: fgC } : {}]\r\n              : [styles[`text_${type}`], fgC ? { color: fgC } : {}],\r\n          ]}>\r\n          <FontAwesome name={icon} size={24} color={iconColor} />\r\n          {addSpace}\r\n          {text}\r\n        </Text>\r\n      )}\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container_PRIMARY: {\r\n    backgroundColor: myColors.primaryBtn,\r\n    width: \"100%\",\r\n    alignItems: \"center\",\r\n    padding: 15,\r\n    marginVertical: 5,\r\n    borderRadius: 5,\r\n  },\r\n  container_pressed_PRIMARY: {\r\n    backgroundColor: myColors.primaryBtnPressed,\r\n    width: \"100%\",\r\n    alignItems: \"center\",\r\n    padding: 15,\r\n    marginVertical: 5,\r\n    borderRadius: 5,\r\n  },\r\n  container_SECONDARY: {\r\n    // borderWidth: 2,\r\n    backgroundColor: \"#00000080\",\r\n    width: \"100%\",\r\n    alignItems: \"center\",\r\n    padding: 15,\r\n    marginVertical: 5,\r\n    // borderRadius: 5,\r\n    // borderColor: myColors.primaryBtn,\r\n  },\r\n  container_pressed_SECONDARY: {\r\n    backgroundColor: myColors.secondaryBtnPressed,\r\n    width: \"100%\",\r\n    alignItems: \"center\",\r\n    padding: 15,\r\n    marginVertical: 5,\r\n    borderRadius: 5,\r\n  },\r\n  text_PRIMARY: {\r\n    fontWeight: \"bold\",\r\n    color: myColors.primaryBtnText,\r\n    fontSize: 15,\r\n    // fontFamily: \"Rubik\",\r\n  },\r\n  text_pressed_PRIMARY: {\r\n    fontWeight: \"bold\",\r\n    color: myColors.primaryBtnTextPressed,\r\n    fontSize: 15,\r\n  },\r\n  text_SECONDARY: {\r\n    fontWeight: \"bold\",\r\n    color: myColors.secondaryBtnText,\r\n    fontSize: 15,\r\n    // fontFamily: \"Rubik\",\r\n  },\r\n  text_pressed_SECONDARY: {\r\n    fontWeight: \"bold\",\r\n    color: myColors.secondaryBtnTextPressed,\r\n    fontSize: 15,\r\n  },\r\n});\r\n\r\nexport default CustomButton;\r\n","import { View, Text } from \"react-native\";\r\nimport React from \"react\";\r\nimport CustomButton from \"../CustomButton\";\r\n\r\nconst onSignInFacebookPressed = () => {\r\n  console.warn(\"Sign in with Facebook\");\r\n};\r\nconst onSignInGooglePressed = () => {\r\n  console.warn(\"Sign in with Google\");\r\n};\r\n\r\nconst SocialSignInButtons = () => {\r\n  return (\r\n    <>\r\n      <CustomButton\r\n        onPress={onSignInFacebookPressed}\r\n        text=\"Sign In with Facebook\"\r\n        bgC=\"#E7EAF4\"\r\n        fgC=\"#4765A9\"\r\n        icon=\"facebook-f\"\r\n        iconColor=\"#4765A9\"\r\n      />\r\n      <CustomButton\r\n        onPress={onSignInGooglePressed}\r\n        text=\"Sign In with Google\"\r\n        bgC=\"#e3e3e3\"\r\n        fgC=\"#DD4D44\"\r\n        icon=\"google\"\r\n        iconColor=\"#DD4D44\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SocialSignInButtons;\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyDRv-P6nUYyq--NxBV9hW9SMTqsSygm61c\",\r\n  authDomain: \"chatapp-4b244.firebaseapp.com\",\r\n  projectId: \"chatapp-4b244\",\r\n  storageBucket: \"chatapp-4b244.appspot.com\",\r\n  messagingSenderId: \"503990776702\",\r\n  appId: \"1:503990776702:web:6faf9c5de482da5fec392f\",\r\n  measurementId: \"G-J530VKK9GF\",\r\n};\r\n\r\n// Initialize Firebase\r\nexport const app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app);\r\n\r\n\r\n","import \"react-native-url-polyfill/auto\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabaseUrl = \"https://kllspqoqajlddmvgnsft.supabase.co\";\r\nconst supabaseKey =\r\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtsbHNwcW9xYWpsZGRtdmduc2Z0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2NzE0NTc3OTcsImV4cCI6MTk4NzAzMzc5N30.-L9aJ-RjtphZTwzaR02m0JZOB-QsfxVYtm-G0HhavmA\";\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey, {\r\n  auth: {\r\n    storage: AsyncStorage,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});\r\n\r\nexport const getMessageByID = async (id) => {\r\n  const { data, error } = await supabase\r\n    .from(\"Message\")\r\n    .select(\"*\")\r\n    .eq(\"id\", id);\r\n  if (error) {\r\n    console.log(error);\r\n  }\r\n  return data[0];\r\n};\r\n","import { supabase } from \"./src/initSupabase\";\r\n\r\nexport const addUser = async (\r\n  id,\r\n  name,\r\n  status = \"Hey there, I'am using WC.\",\r\n  image = `https://notjustdev-dummy.s3.us-east-2.amazonaws.com/avatars/${Math.floor(\r\n    Math.random() * 4 + 1\r\n  )}.jpg`\r\n) => {\r\n  console.log(id);\r\n  //check if user already exists\r\n  const { data, error } = await supabase.from(\"User\").select(\"*\").eq(\"id\", id);\r\n  if (error) {\r\n    console.log(\"first\", error);\r\n    return false;\r\n  }\r\n  if (data.length > 0) {\r\n    return true;\r\n  }\r\n\r\n  //itswhocaresman@gmail.com\r\n  //insert user\r\n\r\n  const res = await supabase.from(\"User\").insert([{ id, name, status, image }]);\r\n  if (res.error) {\r\n    console.log(\"Second\", res.error);\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const listUsers = async () => {\r\n  const { data, error } = await supabase.from(\"User\").select(\"*\");\r\n  if (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const getUserByID = async (id) => {\r\n  const { data, error } = await supabase.from(\"User\").select(\"*\").eq(\"id\", id);\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0];\r\n};\r\n\r\nexport const createChatRoom = async (user1, user2) => {\r\n  // console.log(user1, user2);\r\n  // return null;\r\n  // const { data, error } = await supabase\r\n  //   .from(\"ChatRoom\")\r\n  //   .select(\"*\")\r\n  //   .or(\r\n  //     `user1_id=eq.${user1.id},user2_id=eq.${user2.id}`,\r\n  //     `user1_id=eq.${user2.id},user2_id=eq.${user1.id}`\r\n  //   );\r\n  // if (error) {\r\n  //   console.log(error);\r\n  //   return null;\r\n  // }\r\n  // if (data.length > 0) {\r\n  //   return data[0];\r\n  // }\r\n  const { data, error } = await supabase\r\n    .from(\"ChatRoom\")\r\n    .insert([{ LastMessageID: \"b15f0db2-87f6-4358-874a-4297ee170240\" }]) //here\r\n    .select();\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n\r\n  const res1 = await supabase.from(\"UserChatRoom\").insert([\r\n    { UserID: user1, ChatRoomID: data[0].id },\r\n    { UserID: user2, ChatRoomID: data[0].id },\r\n  ]);\r\n  return data[0];\r\n};\r\n\r\nexport const listUserChatRooms = async (id) => {\r\n  const { data: allChatRooms, error } = await supabase\r\n    .from(\"UserChatRoom\")\r\n    .select(\"ChatRoomID\")\r\n    .eq(\"UserID\", id);\r\n  if (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n  // console.log(\"AllChatRooms\", JSON.stringify(allChatRooms, null, \"\\t\"));\r\n\r\n  const { data: chatRooms, error: err } = await supabase\r\n    .from(\"UserChatRoom\")\r\n    .select(\"User(*),ChatRoom(*)\")\r\n    .in(\r\n      \"ChatRoomID\",\r\n      allChatRooms.map((chatRoom) => chatRoom.ChatRoomID)\r\n    );\r\n\r\n  if (err) {\r\n    console.log(err);\r\n  }\r\n  // console.log(\"AllUsers\", JSON.stringify(chatRooms, null, \"\\t\"));\r\n\r\n  //remove the current user from the list\r\n  const chatRooms1 = chatRooms.filter((chatRoom) => chatRoom.User.id !== id);\r\n\r\n  //add last message to the chat room\r\n  const { data: messages, error: err1 } = await supabase\r\n    .from(\"Message\")\r\n    .select(\"*\")\r\n    .in(\r\n      \"id\",\r\n      chatRooms1.map((chatRoom) => chatRoom.ChatRoom.LastMessageID)\r\n    );\r\n  if (err1) {\r\n    console.log(err1);\r\n  }\r\n  // console.log(\"AllMessages\", JSON.stringify(messages, null, \"\\t\"));\r\n\r\n  // console.log(\"OtherUser\", JSON.stringify(chatRooms1, null, \"\\t\"));\r\n\r\n  // console.log(\"Mesages\", JSON.stringify(messages, null, \"\\t\"));\r\n  //merge the last message with the chat room\r\n  chatRooms1.forEach((chatRoom) => {\r\n    //if last message is null, then return last message as null\r\n    if (chatRoom.ChatRoom.LastMessageID === null) {\r\n      chatRoom.ChatRoom.LastMessage = null;\r\n      return;\r\n    }\r\n    const message = messages.find(\r\n      (message) => message.id === chatRoom.ChatRoom.LastMessageID\r\n    );\r\n    chatRoom.ChatRoom.LastMessage = message;\r\n  });\r\n\r\n  // const message = messages?.find(\r\n  //   (message) => message.id === chatRoom.ChatRoom.LastMessageID\r\n  // );\r\n  // chatRoom.ChatRoom.LastMessage = message;\r\n\r\n  // console.log(\"NewOtherUser\", JSON.stringify(chatRooms1, null, \"\\t\"));\r\n\r\n  return chatRooms1;\r\n};\r\n\r\nexport const getChatRoomByID = async (id) => {\r\n  const { data, error } = await supabase\r\n    .from(\"ChatRoom\")\r\n    .select(\r\n      \"*, LastMessage:Message!ChatRoom_LastMessageID_fkey(created_at, text, UserID)[0]\"\r\n    )\r\n    .eq(\"id\", id);\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0];\r\n};\r\n\r\nexport const createMessage = async ({\r\n  text,\r\n  UserID,\r\n  ChatRoomID,\r\n  isMedia = false,\r\n  ReplyMessageID = null,\r\n}) => {\r\n  const { data, error } = await supabase\r\n    .from(\"Message\")\r\n    .insert([{ text, UserID, ChatRoomID, isMedia, ReplyMessageID }])\r\n    .select();\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0];\r\n};\r\n\r\nexport const deleteMessage = async ({ id, isMedia = false }) => {\r\n  if (isMedia) {\r\n    const { data, error } = await supabase\r\n      .from(\"Message\")\r\n      .select(\"*\")\r\n      .eq(\"id\", id);\r\n    if (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n\r\n    const { data: data2, error: error2 } = await supabase.storage\r\n      .from(\"chatroom\")\r\n      .remove([data[0].text]);\r\n    if (error2) {\r\n      console.log(error2);\r\n      return null;\r\n    }\r\n\r\n    const { data: data1, error: error1 } = await supabase\r\n      .from(\"Message\")\r\n      .update({\r\n        text: \"⦸  This message was deleted\",\r\n        isMedia: false,\r\n        ReplyMessageID: null,\r\n      })\r\n      .eq(\"id\", id)\r\n      .select();\r\n    if (error1) {\r\n      console.log(error1);\r\n      return null;\r\n    }\r\n    return data1[0];\r\n  } else {\r\n    const { data, error } = await supabase\r\n      .from(\"Message\")\r\n      .update({ text: \"⦸  This message was deleted\", ReplyMessageID: null })\r\n      .eq(\"id\", id)\r\n      .select();\r\n    if (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n    return data[0];\r\n  }\r\n};\r\n\r\nexport const updateChatRoomLastMessage = async ({\r\n  ChatRoomID,\r\n  LastMessageID,\r\n}) => {\r\n  const { data, error } = await supabase\r\n    .from(\"ChatRoom\")\r\n    .update({ LastMessageID })\r\n    .eq(\"id\", ChatRoomID)\r\n    .select();\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0];\r\n};\r\n\r\nexport const listMessagesByChatRoom = async (ChatRoomID, noLimit = false) => {\r\n  if (noLimit) {\r\n    const { data, error } = await supabase\r\n      .from(\"Message\")\r\n      .select(\"*, ReplyMessage:ReplyMessageID(*)\")\r\n      .eq(\"ChatRoomID\", ChatRoomID)\r\n      .order(\"created_at\", { ascending: false });\r\n    if (error) {\r\n      console.log(error);\r\n      return [];\r\n    }\r\n    return data;\r\n  }\r\n  const { data, error } = await supabase\r\n    .from(\"Message\")\r\n    .select(\"*, ReplyMessage:ReplyMessageID(*)\")\r\n    .eq(\"ChatRoomID\", ChatRoomID)\r\n    .order(\"created_at\", { ascending: false })\r\n    .limit(50);\r\n  if (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const temp = async (id) => {\r\n  const { data, error } = await supabase\r\n    .from(\"User\")\r\n    .select(\"ChatRoom(*)\")\r\n    .eq(\"UserID\", id);\r\n  if (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n  console.log(data);\r\n};\r\n\r\nexport const getCommonChatRoom = async ({ authUserID, otherUserID }) => {\r\n  const { data: data1, error: err } = await supabase\r\n    .from(\"UserChatRoom\")\r\n    .select(\"ChatRoomID\")\r\n    .eq(\"UserID\", otherUserID);\r\n  if (err) {\r\n    console.log(err);\r\n    return null;\r\n  }\r\n  // console.log(data1);\r\n\r\n  const { data, error } = await supabase\r\n    .from(\"UserChatRoom\")\r\n    .select(\"ChatRoom(*)\")\r\n    .eq(\"UserID\", authUserID)\r\n    .in(\r\n      \"ChatRoomID\",\r\n      data1.map((chatRoom) => chatRoom.ChatRoomID)\r\n    );\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  if (data.length === 0) {\r\n    return null;\r\n  }\r\n  // console.log(data[0].ChatRoom);\r\n  return data[0].ChatRoom;\r\n\r\n  // const { data, error } = await supabase\r\n  //   .from(\"UserChatRoom\")\r\n  //   .select(\"ChatRoom(*)\")\r\n  //   .eq(\"UserID\", authUserID)\r\n  //   .in(\r\n  //     \"ChatRoomID\",\r\n  //     supabase\r\n  //       .from(\"UserChatRoom\")\r\n  //       .select(\"ChatRoomID\")\r\n  //       .eq(\"UserID\", otherUserID)\r\n\r\n  //   );\r\n\r\n  // if (error) {\r\n  //   console.log(error);\r\n  //   return null;\r\n  // }\r\n  // if (data.length === 0) {\r\n  //   return null;\r\n  // }\r\n  // console.log(data[0].ChatRoom);\r\n  // return data[0].ChatRoom;\r\n};\r\n\r\nimport * as Notifications from \"expo-notifications\";\r\nimport * as Device from \"expo-device\";\r\nimport { auth } from \"./firebase\";\r\n\r\nexport const addUserPushToken = async ({\r\n  UserID = auth.currentUser.uid,\r\n  PushToken = \"\",\r\n}) => {\r\n  if (PushToken === \"\" && Device.isDevice) {\r\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    PushToken = token;\r\n  }\r\n  if (!Device.isDevice) return null;\r\n  //check if the user already has a push token\r\n  const { data, error } = await supabase\r\n    .from(\"UserToken\")\r\n    .select(\"*\")\r\n    .eq(\"id\", UserID);\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  if (data.length === 0) {\r\n    //if user does not have a push token, add one\r\n    const { data, error } = await supabase\r\n      .from(\"UserToken\")\r\n      .insert([{ id: UserID, PushToken }]);\r\n    if (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n    return true;\r\n  } else {\r\n    //if user already has a push token, update it\r\n    const { data, error } = await supabase\r\n      .from(\"UserToken\")\r\n      .update({ PushToken })\r\n      .eq(\"id\", UserID);\r\n    if (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const getUserPushToken = async (UserID) => {\r\n  const { data, error } = await supabase\r\n    .from(\"UserToken\")\r\n    .select(\"*\")\r\n    .eq(\"id\", UserID);\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0];\r\n};\r\n\r\nexport const updateUserChatRoomLastSeen = async ({\r\n  ChatRoomID,\r\n  LastSeenMessageID,\r\n  UserID,\r\n}) => {\r\n  const { data, error } = await supabase\r\n    .from(\"UserChatRoom\")\r\n    .update({ LastSeenMessageID, LastSeenAt: new Date() })\r\n    .eq(\"ChatRoomID\", ChatRoomID)\r\n    .eq(\"UserID\", UserID)\r\n    .select();\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0];\r\n};\r\n\r\nexport const getUserChatRoomLastSeen = async ({ ChatRoomID, UserID }) => {\r\n  const { data, error } = await supabase\r\n    .from(\"UserChatRoom\")\r\n    .select(\"*\")\r\n    .eq(\"ChatRoomID\", ChatRoomID)\r\n    .eq(\"UserID\", UserID);\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0]?.LastSeenAt;\r\n};\r\n\r\nexport const updateUserChatRoomLastSeenAt = async ({ ChatRoomID, UserID }) => {\r\n  const { data, error } = await supabase\r\n    .from(\"UserChatRoom\")\r\n    .update({ LastSeenAt: new Date() })\r\n    .eq(\"ChatRoomID\", ChatRoomID)\r\n    .eq(\"UserID\", UserID)\r\n    .select();\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0];\r\n};\r\n\r\nexport const test = async (UserID) => {\r\n  // const { data, error } = await supabase\r\n  //   .from(\"Message\")\r\n  //   .select(\"*, ReplyMessage:ReplyMessageID(*)\")\r\n  //   .eq(\"ChatRoomID\", ChatRoomID)\r\n  //   .order(\"created_at\", { ascending: false });\r\n  // if (error) {\r\n  //   console.log(error);\r\n  //   return [];\r\n  // }\r\n  //list all chatrooms that the user is in\r\n  const { data, error } = await supabase\r\n    .from(\"UserChatRoom\")\r\n    .select(\"ChatRoom(*)\")\r\n    .eq(\"UserID\", UserID);\r\n  if (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n\r\n  console.log(JSON.stringify(data[0], null, \"\\t\"));\r\n  return data;\r\n};\r\n\r\nexport const getMessageByID = async (MessageID) => {\r\n  const { data, error } = await supabase\r\n    .from(\"Message\")\r\n    .select(\"*, ReplyMessage:ReplyMessageID(*)\")\r\n    .eq(\"id\", MessageID);\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  return data[0];\r\n};\r\n","import * as Notifications from \"expo-notifications\";\r\nimport * as Device from \"expo-device\";\r\nimport { Platform } from \"react-native\";\r\nimport { auth } from \"../firebase\";\r\n\r\nimport { addUserPushToken } from \"../supabaseQueries\";\r\n\r\nexport const registerForPushNotificationsAsync = async () => {\r\n  if (Device.isDevice) {\r\n    const { status: existingStatus } =\r\n      await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== \"granted\") {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== \"granted\") {\r\n      alert(\"Failed to get push token for push notification!\");\r\n      return;\r\n    }\r\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n    await addUserPushToken({ UserID: auth.currentUser.uid, PushToken: token });\r\n  } else {\r\n    // alert(\"Must use physical device for Push Notifications\");\r\n  }\r\n\r\n  if (Platform.OS === \"android\") {\r\n    Notifications.setNotificationChannelAsync(\"default\", {\r\n      name: \"default\",\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: \"#FF231F7C\",\r\n    });\r\n  }\r\n};\r\n\r\nimport { supabase } from \"./initSupabase\";\r\n\r\nexport const sendPushNotification = async ({ UserID, message }) => {\r\n  const { data, error } = await supabase\r\n    .from(\"UserToken\")\r\n    .select(\"PushToken\")\r\n    .eq(\"id\", UserID);\r\n  if (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n  if (data.length === 0) {\r\n    return null;\r\n  }\r\n  const PushToken = data[0].PushToken;\r\n  const message1 = {\r\n    to: PushToken,\r\n    sound: \"default\",\r\n    title: message.title,\r\n    body: message.body,\r\n    data: { data: \"goes here\" },\r\n  };\r\n  try {\r\n    const response = await fetch(\"https://exp.host/--/api/v2/push/send\", {\r\n      mode: \"no-cors\",\r\n      method: \"POST\",\r\n      headers: {\r\n        //   Accept: \"application/json\",\r\n        //   \"Accept-encoding\": \"gzip, deflate\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(message1),\r\n    });\r\n  } catch {\r\n    console.log(\"error\");\r\n  }\r\n  // console.log(JSON.stringify(response, null, \"\\t\"));\r\n};\r\n","import {\r\n  View,\r\n  Text,\r\n  Image,\r\n  StyleSheet,\r\n  useWindowDimensions,\r\n  Alert,\r\n} from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport Logo from \"../../../assets/images/WhoCares.png\";\r\nimport CustomInput from \"../../components/CustomInput/CustomInput\";\r\nimport CustomButton from \"../../components/CustomButton\";\r\nimport SocialSignInButtons from \"../../components/SocialSignInButtons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\n\r\nimport { myColors } from \"../../../colors\";\r\n\r\nimport { auth } from \"../../../firebase\";\r\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\r\n\r\nimport { addUser } from \"../../../supabaseQueries\";\r\n\r\nimport { registerForPushNotificationsAsync } from \"../../notification\";\r\n\r\nconst SignIn = () => {\r\n  const route = useRoute();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const { control, handleSubmit } = useForm({\r\n    defaultValues: {\r\n      email: route?.params?.email,\r\n    },\r\n  });\r\n  const navigation = useNavigation();\r\n\r\n  const onSignInPressed = async (data) => {\r\n    if (loading) return;\r\n    setLoading(true);\r\n    try {\r\n      // const response = await Auth.signIn(data.email.trim(), data.password);\r\n      // syncUser();\r\n\r\n      //firebase\r\n      const response = await signInWithEmailAndPassword(\r\n        auth,\r\n        data.email.trim(),\r\n        data.password\r\n      );\r\n      if (!response.user.emailVerified) {\r\n        Alert.alert(\"Please verify your email\");\r\n        return;\r\n      }\r\n\r\n      const res = await addUser(response.user.uid, response.user.displayName);\r\n      if (!res) {\r\n        Alert.alert(\"Oops\", \"Something went wrong\");\r\n        return;\r\n      }\r\n      // console.log(\"Calling notification\");\r\n      registerForPushNotificationsAsync();\r\n      navigation.navigate(\"Home\");\r\n    } catch (error) {\r\n      Alert.alert(\"Oops\", error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const onSingUpPressed = () => {\r\n    console.warn(\"Sign up\");\r\n    navigation.navigate(\"SignUp\");\r\n  };\r\n  const onForgotPasswordPressed = () => {\r\n    navigation.navigate(\"ResetPassword\");\r\n  };\r\n\r\n  const [Email, setEmail] = useState(\"\");\r\n  const [Password, setPassword] = useState(\"\");\r\n  const { width, height } = useWindowDimensions();\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.logoText}>WhoCares!</Text>\r\n      <View style={styles.container}>\r\n        <CustomInput\r\n          autoFocus={true}\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          control={control}\r\n          rules={{ required: \"Email is required\" }}\r\n        />\r\n        <CustomInput\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Password is required\",\r\n            minLength: {\r\n              value: 6,\r\n              message: \"Password must be minimun 6 character long\",\r\n            },\r\n          }}\r\n          secure={true}\r\n        />\r\n        <CustomButton\r\n          onPress={handleSubmit(onSignInPressed)}\r\n          text={loading ? \"Loading...\" : \"Sign In\"}\r\n        />\r\n        <Text style={styles.forgot} onPress={onForgotPasswordPressed}>\r\n          Forgot Password ?\r\n        </Text>\r\n      </View>\r\n      <View style={styles.social}>\r\n        <SocialSignInButtons />\r\n      </View>\r\n      <View style={styles.signup}>\r\n        <Text style={styles.forgot} onPress={onSingUpPressed}>\r\n          Don't have an account?{\" \"}\r\n          <Text style={{ color: myColors.primaryBtn }}>Sign Up</Text>\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    // flex: 1,\r\n    backgroundColor: myColors.pbgc,\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n    // minHeight: 700,\r\n  },\r\n  logo: {\r\n    width: \"100%\",\r\n    maxWidth: 300,\r\n    maxHeight: 200,\r\n  },\r\n  logoText: {\r\n    paddingVertical: 20,\r\n    color: \"white\",\r\n    fontSize: 56,\r\n    // fontWeight: \"bold\",\r\n  },\r\n  container: {\r\n    maxWidth: 400,\r\n    width: \"100%\",\r\n    borderColor: \"white\",\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    marginVertical: 20,\r\n    padding: 20,\r\n    backgroundColor: myColors.sbgc,\r\n  },\r\n  forgot: {\r\n    // fontFamily: \"Rubik-Regular\",\r\n    fontWeight: \"bold\",\r\n    paddingVertical: 10,\r\n    fontSize: 15,\r\n    color: \"white\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    // textDecorationLine: \"underline\",\r\n    // textDecorationColor: \"white\",\r\n  },\r\n  social: {\r\n    width: \"100%\",\r\n    maxWidth: 400,\r\n  },\r\n  signup: {\r\n    backgroundColor: myColors.pbgc,\r\n    width: \"100%\",\r\n    maxWidth: 400,\r\n  },\r\n});\r\n\r\nexport default SignIn;\r\n","import {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  useWindowDimensions,\r\n  ScrollView,\r\n  Alert,\r\n} from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport CustomInput from \"../../components/CustomInput/CustomInput\";\r\nimport CustomButton from \"../../components/CustomButton\";\r\nimport { myColors } from \"../../../colors\";\r\nimport SocialSignInButtons from \"../../components/SocialSignInButtons\";\r\nimport { StackActions, useNavigation } from \"@react-navigation/native\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\n//firebase\r\nimport { auth } from \"../../../firebase\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  updateProfile,\r\n  sendEmailVerification,\r\n  signOut,\r\n} from \"firebase/auth\";\r\n\r\nconst EMAIL_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n\r\nconst onPrivacyPressed = () => {\r\n  console.warn(\"Privacy\");\r\n};\r\n\r\nconst SignUp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { control, handleSubmit, watch } = useForm();\r\n  const pwd = watch(\"password\");\r\n\r\n  const navigation = useNavigation();\r\n  const onSignInPressed = () => {\r\n    console.warn(\"Sign in\");\r\n    navigation.navigate(\"SignIn\");\r\n  };\r\n  const onRegisterPressed = async (data) => {\r\n    if (loading) return;\r\n    setLoading(true);\r\n    const { name, email, password } = data;\r\n    name.trim();\r\n    email.trim();\r\n    password.trim();\r\n    try {\r\n      // const response = await Auth.signUp({\r\n      //   username: email,\r\n      //   email,\r\n      //   password,\r\n      //   attributes: {\r\n      //     name,\r\n      //   },\r\n      // });\r\n      // console.log(userData);\r\n\r\n      //firebase\r\n      const userData = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      );\r\n      await updateProfile(userData.user, {\r\n        displayName: name,\r\n        photoURL: `https://notjustdev-dummy.s3.us-east-2.amazonaws.com/avatars/${Math.floor(\r\n          Math.random() * 4 + 1\r\n        )}.jpg`,\r\n      });\r\n      const response = await sendEmailVerification(userData.user);\r\n      // console.log(response);\r\n\r\n      Alert.alert(\r\n        \"Success\",\r\n        \"Please check your email to confirm your account.\"\r\n      );\r\n      signOut(auth);\r\n      navigation.navigate(\"SignIn\", { email });\r\n    } catch (error) {\r\n      Alert.alert(\"Oops\", error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const onTermsPressed = () => {\r\n    navigation.navigate(\"ConfirmEmail\");\r\n    console.warn(\"Terms\");\r\n  };\r\n\r\n  const { width, height } = useWindowDimensions();\r\n  const [Username, setUsername] = useState(\"\");\r\n  const [Email, setEmail] = useState(\"\");\r\n  const [Password, setPassword] = useState(\"\");\r\n  const [ConfirmPassword, setConfirmPassword] = useState(\"\");\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.title}>Create an account</Text>\r\n      <View style={styles.container}>\r\n        <CustomInput\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Name is required\",\r\n            minLength: {\r\n              value: 3,\r\n              message: \"Name must be at least 3 characters\",\r\n            },\r\n            maxLength: {\r\n              value: 15,\r\n              message: \"Name must be at most 15 characters\",\r\n            },\r\n          }}\r\n        />\r\n        <CustomInput\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Email is required\",\r\n            pattern: { value: EMAIL_REGEX, message: \"Invalid email address\" },\r\n          }}\r\n        />\r\n        <CustomInput\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Password is required\",\r\n            minLength: {\r\n              value: 6,\r\n              message: \"Password must be at least 6 characters\",\r\n            },\r\n          }}\r\n          secure={true}\r\n        />\r\n        <CustomInput\r\n          name=\"confirmPassword\"\r\n          placeholder=\"Confirm Password\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Passwords do not match\",\r\n            validate: (value) => value === pwd || \"Passwords do not match\",\r\n          }}\r\n          secure={true}\r\n        />\r\n        <CustomButton\r\n          onPress={handleSubmit(onRegisterPressed)}\r\n          text={loading ? \"Loading...\" : \"Register\"}\r\n        />\r\n        <Text style={styles.text}>\r\n          By registering, you confirm that you accept our{\" \"}\r\n          <Text style={{ color: \"white\" }} onPress={onTermsPressed}>\r\n            Terms of use\r\n          </Text>{\" \"}\r\n          and{\" \"}\r\n          <Text style={{ color: \"white\" }} onPress={onPrivacyPressed}>\r\n            Privacy Policy\r\n          </Text>\r\n        </Text>\r\n      </View>\r\n      <View style={{ maxWidth: 400, width: \"100%\" }}>\r\n        <SocialSignInButtons />\r\n      </View>\r\n\r\n      <Text style={styles.link} onPress={onSignInPressed}>\r\n        Already have an account?{\" \"}\r\n        <Text style={{ color: myColors.primaryBtn }}>Sign In</Text>\r\n      </Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    // flex: 1,\r\n    // height: \"auto\",\r\n    backgroundColor: myColors.pbgc,\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n  },\r\n  container: {\r\n    maxWidth: 400,\r\n    width: \"100%\",\r\n    borderColor: \"white\",\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    marginVertical: 20,\r\n    padding: 20,\r\n    backgroundColor: myColors.sbgc,\r\n  },\r\n  link: {\r\n    fontWeight: \"bold\",\r\n    paddingVertical: 10,\r\n    fontSize: 15,\r\n    color: \"white\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    // textDecorationLine: \"underline\",\r\n    // textDecorationColor: \"white\",\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n    margin: 10,\r\n  },\r\n  text: {\r\n    color: \"#707271\",\r\n    fontSize: 12,\r\n    textAlign: \"center\",\r\n    marginVertical: 10,\r\n  },\r\n});\r\n\r\nexport default SignUp;\r\n","import {\r\n  View,\r\n  Alert,\r\n  Text,\r\n  StyleSheet,\r\n  useWindowDimensions,\r\n} from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport CustomInput from \"../../components/CustomInput/CustomInput\";\r\nimport CustomButton from \"../../components/CustomButton\";\r\nimport { myColors } from \"../../../colors\";\r\nimport SocialSignInButtons from \"../../components/SocialSignInButtons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\n\r\nconst ConfirmEmail = () => {\r\n  const route = useRoute();\r\n  const { control, handleSubmit, watch } = useForm({\r\n    defaultValues: {\r\n      email: route?.params?.email,\r\n    },\r\n  });\r\n\r\n  const email = watch(\"email\");\r\n  const navigation = useNavigation();\r\n\r\n  const onConfirmPressed = async (data) => {\r\n    try {\r\n      const response = await Auth.confirmSignUp(data.email, data.code);\r\n      navigation.popToTop();\r\n    } catch (error) {\r\n      Alert.alert(\"Oops\", error.message);\r\n    }\r\n  };\r\n\r\n  const onResendPressed = async () => {\r\n    try {\r\n      const response = await Auth.resendSignUp(email);\r\n      Alert.alert(\"Success\", \"Code resent\");\r\n    } catch (error) {\r\n      Alert.alert(\"Oops\", error.message);\r\n    }\r\n  };\r\n  const onSignInPressed = () => {\r\n    console.warn(\"Sign in\");\r\n    navigation.navigate(\"SignIn\");\r\n  };\r\n\r\n  const { width, height } = useWindowDimensions();\r\n  const [Code, setCode] = useState(\"\");\r\n  const [ConfirmPassword, setConfirmPassword] = useState(\"\");\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.title}>Confirm your email</Text>\r\n      <View style={styles.container}>\r\n        <CustomInput\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          control={control}\r\n          rules={{ required: \"Email is required\" }}\r\n        />\r\n        <CustomInput\r\n          name=\"code\"\r\n          placeholder=\"Enter your confirmation code\"\r\n          control={control}\r\n          rules={{ required: \"Confirmation code is required\" }}\r\n        />\r\n\r\n        <CustomButton onPress={handleSubmit(onConfirmPressed)} text=\"Confirm\" />\r\n        <View style={styles.btnContainer}>\r\n          <View>\r\n            <CustomButton\r\n              text=\"Resend code\"\r\n              type=\"SECONDARY\"\r\n              onPress={onResendPressed}\r\n            />\r\n          </View>\r\n\r\n          <View>\r\n            <CustomButton\r\n              text=\"Back to Sign in\"\r\n              onPress={onSignInPressed}\r\n              type=\"SECONDARY\"\r\n            />\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: myColors.pbgc,\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n  },\r\n  container: {\r\n    width: \"100%\",\r\n    borderColor: \"white\",\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    marginVertical: 20,\r\n    padding: 20,\r\n    backgroundColor: myColors.sbgc,\r\n  },\r\n  link: {\r\n    fontWeight: \"bold\",\r\n    paddingVertical: 10,\r\n    fontSize: 15,\r\n    color: \"white\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    textDecorationLine: \"underline\",\r\n    textDecorationColor: \"white\",\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n    margin: 10,\r\n  },\r\n  text: {\r\n    width: \"100%\",\r\n    // justifyContent: \"space-around\",\r\n    // marginHorizontal: 10,\r\n    color: \"#707271\",\r\n    fontSize: 12,\r\n    // textAlign: \"center\",\r\n    marginVertical: 10,\r\n  },\r\n  btnContainer: {\r\n    flexDirection: \"row\",\r\n    // alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n});\r\n\r\nexport default ConfirmEmail;\r\n","import { View, Text, StyleSheet, Image, Pressable } from \"react-native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\nimport { myColors } from \"../../../colors\";\r\ndayjs.extend(relativeTime);\r\n\r\nimport { auth } from \"../../../firebase\";\r\nimport { supabase } from \"../../initSupabase\";\r\nimport { getMessageByID } from \"../../initSupabase\";\r\n\r\n// import * as Notifications from \"expo-notifications\";\r\n\r\nconst ChatListItem = ({ chat, onPress }) => {\r\n  const navigation = useNavigation();\r\n  const [otherUser, setOtherUser] = useState(chat.User);\r\n  const [chatRoom, setChatRoom] = useState(chat);\r\n  // console.log(console.log(\"hehe\", JSON.stringify(chat, null, \"\\t\")));\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      // console.log(\"yeyeyeye\");\r\n      // const authUser = auth.currentUser;\r\n      // const userItem = chatRoom.users.find((item) => item?.id !== authUser.uid);\r\n      // setUser(userItem?.users);\r\n      // console.log(userItem);\r\n    };\r\n    fetchUser();\r\n\r\n    // Notifications.setNotificationHandler({\r\n    //   handleNotification: async () => ({\r\n    //     shouldShowAlert: true,\r\n    //     shouldPlaySound: true,\r\n    //     shouldSetBadge: false,\r\n    //   }),\r\n    // });\r\n\r\n    // console.log(chat.ChatRoom.id);\r\n    // Subscribe to onUpdateChatRoom\r\n    const subscription = supabase\r\n      .channel(\"public:ChatRoom:id=eq.\" + chat.ChatRoom.id + \"\")\r\n      .on(\r\n        \"postgres_changes\",\r\n        {\r\n          event: \"UPDATE\",\r\n          schema: \"public\",\r\n          table: \"ChatRoom\",\r\n          filter: `id=eq.${chat.ChatRoom.id}`,\r\n        },\r\n        async (payload) => {\r\n          // console.log(\r\n          //   \"Before\",\r\n          //   auth.currentUser.uid,\r\n          //   JSON.stringify(chatRoom, null, \"\\t\")\r\n          // );\r\n          //Update the chat room last message\r\n\r\n          if (payload.new.id === chatRoom.ChatRoom.id) {\r\n            const newChatRoom = { ...chatRoom } || {};\r\n            newChatRoom.ChatRoom.LastMessageID = payload.new.LastMessageID;\r\n            const newMsg = await getMessageByID(payload.new.LastMessageID);\r\n            newChatRoom.ChatRoom.LastMessage = newMsg;\r\n            setChatRoom(newChatRoom);\r\n            // const res = await fetch(\"https://exp.host/--/api/v2/push/send\", {\r\n            //   method: \"POST\",\r\n            //   headers: {\r\n            //     \"Content-Type\": \"application/json\",\r\n            //   },\r\n            //   // body: '{\"to\": \"ExponentPushToken[KBqO4ID4i4FW6nA3vpdgt4]\",\"title\":\"hello\",\"body\": \"world\"}',\r\n            //   body: JSON.stringify({\r\n            //     to: \"ExponentPushToken[KBqO4ID4i4FW6nA3vpdgt4]\",\r\n            //     title: otherUser.name,\r\n            //     body: newMsg.text,\r\n            //   }),\r\n            // });\r\n            // console.log(JSON.stringify(res, null, \"\\t\"));\r\n          }\r\n\r\n          // console.log(\r\n          //   \"After\",\r\n          //   auth.currentUser.uid,\r\n          //   JSON.stringify(chatRoom, null, \"\\t\")\r\n          // );\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => supabase.removeChannel(subscription);\r\n  }, [chat.ChatRoom.id]);\r\n\r\n  //check for not Auth user\r\n  if (chatRoom?.ChatRoom?.LastMessage.text == \"Send first message\") {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Pressable\r\n      style={({ pressed }) =>\r\n        pressed ? [styles.containerPressed] : styles.container\r\n      }\r\n      onPress={\r\n        // () =>\r\n        // navigation.navigate(\"ChatRoom\", {\r\n        //   id: chatRoom?.ChatRoom?.id,\r\n        //   user: {\r\n        //     id: otherUser.id,\r\n        //     name: otherUser.name,\r\n        //     image: otherUser.image,\r\n        //   },\r\n        // })\r\n        () =>\r\n          onPress(\r\n            {\r\n              id: otherUser.id,\r\n              name: otherUser.name,\r\n              image: otherUser.image,\r\n            },\r\n            chatRoom?.ChatRoom?.id\r\n          )\r\n      }>\r\n      <Image style={styles.image} source={{ uri: otherUser?.image }} />\r\n      <View style={styles.content}>\r\n        <View style={styles.row}>\r\n          <Text numberOfLines={1} style={styles.name}>\r\n            {otherUser?.name}\r\n          </Text>\r\n          {chatRoom?.ChatRoom.LastMessage && (\r\n            <Text numberOfLines={2} style={styles.time}>\r\n              {dayjs(chatRoom?.ChatRoom?.LastMessage?.created_at).fromNow(true)}\r\n            </Text>\r\n          )}\r\n        </View>\r\n\r\n        <Text style={styles.text} numberOfLines={2}>\r\n          {chatRoom?.ChatRoom.LastMessage?.text}\r\n        </Text>\r\n      </View>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: \"row\",\r\n    marginHorizontal: 10,\r\n    marginVertical: 5,\r\n    height: 80,\r\n\r\n    // backgroundColor: myColors.containerPressed,\r\n    borderRadius: 10,\r\n    padding: 5,\r\n    // borderBottomWidth: StyleSheet.hairlineWidth,\r\n    // borderBottomColor: \"grey\",\r\n  },\r\n  containerPressed: {\r\n    backgroundColor: myColors.containerPressed,\r\n    flexDirection: \"row\",\r\n    marginHorizontal: 10,\r\n    marginVertical: 5,\r\n    borderRadius: 10,\r\n    height: 80,\r\n    padding: 5,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    borderBottomWidth: StyleSheet.hairlineWidth,\r\n    borderBottomColor: \"grey\",\r\n  },\r\n  image: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 30,\r\n    marginRight: 10,\r\n\r\n    marginVertical: 5,\r\n  },\r\n  row: {\r\n    flexDirection: \"row\",\r\n    marginBottom: 5,\r\n  },\r\n  name: {\r\n    // fontWeight: \"bold\",\r\n    fontSize: 16,\r\n    color: \"white\",\r\n    flex: 1,\r\n  },\r\n  time: {\r\n    color: myColors.secondaryText,\r\n    paddingHorizontal: 5,\r\n  },\r\n  text: {\r\n    color: myColors.secondaryText,\r\n  },\r\n});\r\n\r\nexport default ChatListItem;\r\n","import { View, Text, StyleSheet } from \"react-native\";\r\nimport React from \"react\";\r\nimport { AntDesign } from \"@expo/vector-icons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n// import * as Linking from \"expo-linking\";\r\nconst HomeHeader = () => {\r\n  const navigation = useNavigation();\r\n  const onSettingsPressed = async () => {\r\n    // Linking.openURL(\"wca://\");\r\n    navigation.navigate(\"Settings\");\r\n  };\r\n  const onSearchPressed = () => {\r\n    navigation.navigate(\"Search\");\r\n  };\r\n  return (\r\n    <View style={styles.root}>\r\n      <View style={styles.left}>\r\n        <Text style={styles.title}>Chats</Text>\r\n      </View>\r\n      <View style={styles.right}>\r\n        <AntDesign\r\n          onPress={onSearchPressed}\r\n          name=\"search1\"\r\n          size={24}\r\n          color=\"white\"\r\n          style={{ marginRight: 20 }}\r\n        />\r\n        <AntDesign\r\n          onPress={onSettingsPressed}\r\n          name=\"setting\"\r\n          size={24}\r\n          color=\"white\"\r\n          style={{}}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // backgroundColor: \"#3777f0\",\r\n    paddingVertical: 10,\r\n    \r\n  },\r\n  left: {\r\n    paddingHorizontal: 20,\r\n  },\r\n\r\n  title: {\r\n    color: \"white\",\r\n    // fontWeight: \"bold\",\r\n    fontSize: 20,\r\n  },\r\n  right: {\r\n    marginLeft: \"auto\",\r\n    flexDirection: \"row\",\r\n    paddingHorizontal: 20,\r\n  },\r\n});\r\nexport default HomeHeader;\r\n","import { View, Text, StyleSheet, Image, Pressable } from \"react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\n\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\nimport { myColors } from \"../../../colors\";\r\ndayjs.extend(relativeTime);\r\n\r\nimport { auth } from \"../../../firebase\";\r\nimport { createChatRoom, getCommonChatRoom } from \"../../../supabaseQueries\";\r\n\r\nconst SearchListItem = ({ user }) => {\r\n  const navigation = useNavigation();\r\n  const [authUser, setAuthUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      const userInfo = auth.currentUser;\r\n      // console.log(userInfo);\r\n      setAuthUser(userInfo);\r\n    };\r\n    fetchUser();\r\n  }, []);\r\n\r\n  const onPress = async () => {\r\n    //Check if the user is already in the chat room\r\n    if (loading) return;\r\n    setLoading(true);\r\n\r\n    const commonChatRoom = await getCommonChatRoom({\r\n      authUserID: auth.currentUser.uid,\r\n      otherUserID: user.id,\r\n    });\r\n    console.log(\"other user\", user.id, \"auth user\", auth.currentUser.uid);\r\n    console.log(\"here\", commonChatRoom);\r\n    if (commonChatRoom) {\r\n      navigation.navigate(\"ChatRoom\", {\r\n        id: commonChatRoom.id,\r\n        user: {\r\n          id: user.id,\r\n          name: user.name,\r\n          image: user.image,\r\n        },\r\n      });\r\n      return;\r\n    }\r\n\r\n    // if not create a new chat room\r\n    const newChatRoomData = await createChatRoom(auth.currentUser.uid, user.id);\r\n    console.log(newChatRoomData);\r\n    navigation.navigate(\"ChatRoom\", {\r\n      id: newChatRoomData.id,\r\n      user: {\r\n        id: user.id,\r\n        name: user.name,\r\n        image: user.image,\r\n      },\r\n    });\r\n    setLoading(false);\r\n  };\r\n  if (authUser?.uid == user.id) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Pressable style={styles.container} onPress={onPress}>\r\n      <Image style={styles.image} source={{ uri: user.image }} />\r\n      <View style={styles.content}>\r\n        <View style={styles.row}>\r\n          <Text numberOfLines={1} style={styles.name}>\r\n            {user.name}\r\n          </Text>\r\n          {user.createdAt !== undefined && (\r\n            <Text numberOfLines={2} style={styles.subTitle}>\r\n              {dayjs(user.createdAt).fromNow(true)}\r\n            </Text>\r\n          )}\r\n        </View>\r\n\r\n        {user.status !== undefined && (\r\n          <Text numberOfLines={2} style={styles.subTitle}>\r\n            {user.status}\r\n          </Text>\r\n        )}\r\n      </View>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: \"row\",\r\n    marginHorizontal: 10,\r\n    marginVertical: 5,\r\n    height: 70,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    borderBottomWidth: StyleSheet.hairlineWidth,\r\n    borderBottomColor: \"grey\",\r\n  },\r\n  image: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 30,\r\n    marginRight: 10,\r\n  },\r\n  row: {\r\n    flexDirection: \"row\",\r\n    marginBottom: 5,\r\n  },\r\n  name: {\r\n    // fontWeight: \"bold\",\r\n    fontSize: 16,\r\n    color: \"white\",\r\n    flex: 1,\r\n  },\r\n  subTitle: {\r\n    color: myColors.secondaryText,\r\n  },\r\n});\r\n\r\nexport default SearchListItem;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  TextInput,\r\n  StyleSheet,\r\n  Alert,\r\n  Text,\r\n  Pressable,\r\n  Platform,\r\n} from \"react-native\";\r\nimport { myColors } from \"../../../colors\";\r\nimport { AntDesign, MaterialIcons } from \"@expo/vector-icons\";\r\n// import { createMessage, updateChatRoom } from \"../../graphql/mutations\";\r\n\r\nimport { auth } from \"../../../firebase\";\r\nimport {\r\n  createMessage,\r\n  updateChatRoomLastMessage,\r\n  getCommonChatRoom,\r\n  getUserByID,\r\n  test,\r\n} from \"../../../supabaseQueries\";\r\n\r\nimport { sendPushNotification } from \"../../notification\";\r\nimport { decode } from \"base64-arraybuffer\";\r\n\r\nimport * as ImagePicker from \"expo-image-picker\";\r\n\r\nconst ChatInput = ({\r\n  chatRoom,\r\n  otherUser,\r\n  onTyping,\r\n  replying,\r\n  handleReplyingCancel,\r\n}) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  // const [otherUser, setOtherUser] = useState(OtherUser);\r\n  const [loading, setLoading] = useState(false);\r\n  // const [reply, setReply] = useState(replying);\r\n\r\n  const handleSend = async () => {\r\n    // test(auth.currentUser.uid);\r\n    // return;\r\n    // console.log(\"replying\", replying);\r\n    // console.log(\"message\", message);\r\n    // console.log(\"loading\", loading);\r\n    // return;\r\n    if (loading) return;\r\n    setLoading(true);\r\n    if (message === \"\") return;\r\n    // console.log(\"Sending: \", message);\r\n\r\n    // send the message to the chat server\r\n    // console.warn(`Sending: ${message}`);\r\n\r\n    // send the message to the backend\r\n    const newMessageData = await createMessage({\r\n      ChatRoomID: chatRoom.id,\r\n      text: message.trim(),\r\n      UserID: auth.currentUser.uid,\r\n      ReplyMessageID: replying?.id,\r\n    });\r\n    // console.log(\"New Message\", newMessageData);\r\n    setMessage(\"\");\r\n    handleReplyingCancel();\r\n\r\n    //Update the last message in the chat room\r\n    const res = await updateChatRoomLastMessage({\r\n      ChatRoomID: chatRoom.id,\r\n      LastMessageID: newMessageData.id,\r\n    });\r\n    setLoading(false);\r\n\r\n    //send push notification\r\n    // console.log(otherUser);\r\n    const oUser = await getUserByID(auth.currentUser.uid);\r\n    const notificationMessage = {\r\n      title: oUser.name,\r\n      body: newMessageData.text,\r\n    };\r\n    sendPushNotification({\r\n      UserID: otherUser.id,\r\n      message: notificationMessage,\r\n    });\r\n\r\n    // console.log(\"otherUser\", otherUser);\r\n  };\r\n\r\n  // const tempp = async () => {\r\n  //   console.log(\"tempp\");\r\n  //   const res = await getCommonChatRoom({\r\n  //     authUserID: \"usOWdwZr9XeOwdkIyjbJixXDmC12\",\r\n  //     otherUserID: \"JK2Ww9wLsuTXgFVwj9U6BCxUw704\",\r\n  //   });\r\n  // };\r\n  // const [image, setImage] = useState(null);\r\n  const handleImagePick = async () => {\r\n    if (Platform.OS === \"web\") return;\r\n    // No permissions request is necessary for launching the image library\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n      allowsEditing: true,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n      base64: true,\r\n    });\r\n\r\n    // console.log(JSON.stringify(result, null, \"\\t\"));\r\n\r\n    if (!result.canceled) {\r\n      // setImage(result.assets[0].uri);\r\n      _uploadImage(result.assets[0], chatRoom.id, otherUser.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {replying && (\r\n        <View style={styles.replyContainer}>\r\n          <View>\r\n            <Text style={styles.reply}>{\"Replying to \" + otherUser?.name}</Text>\r\n            <Text style={{ color: \"white\", fontSize: 12 }}>\r\n              {replying?.text}\r\n            </Text>\r\n          </View>\r\n          <View style={styles.iconClose}>\r\n            <AntDesign\r\n              // style={{\r\n              //   backgroundColor: myColors.containerPressed,\r\n              //   borderRadius: 24,\r\n              // }}\r\n              name=\"close\"\r\n              size={24}\r\n              color=\"white\"\r\n              onPress={() => handleReplyingCancel()}\r\n            />\r\n          </View>\r\n        </View>\r\n      )}\r\n      <View style={styles.inputContainer}>\r\n        <AntDesign\r\n          name=\"plus\"\r\n          size={24}\r\n          color=\"white\"\r\n          onPress={handleImagePick}\r\n        />\r\n        <TextInput\r\n          value={message}\r\n          onChangeText={(text) => {\r\n            setMessage(text);\r\n            onTyping(text);\r\n          }}\r\n          placeholder=\"Message...\"\r\n          placeholderTextColor={\"gray\"}\r\n          style={[\r\n            styles.input,\r\n            {\r\n              height: Math.max(\r\n                40,\r\n                Math.min(message.split(/\\r\\n|\\r|\\n/).length * 1.5 + 40, 60)\r\n              ),\r\n            },\r\n          ]}\r\n          returnKeyType=\"send\"\r\n          onSubmitEditing={handleSend}\r\n          multiline={true}\r\n        />\r\n        <MaterialIcons\r\n          onPress={handleSend}\r\n          name=\"send\"\r\n          size={24}\r\n          color=\"royalblue\"\r\n        />\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  inputContainer: {\r\n    flexDirection: \"row\",\r\n    backgroundColor: myColors.SecondaryMessage,\r\n    borderRadius: 25,\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 4,\r\n    marginHorizontal: 15,\r\n    // marginVertical: 10,\r\n    marginBottom: 10,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    height: 40,\r\n    backgroundColor: myColors.SecondaryMessage,\r\n    borderColor: myColors.SecondaryMessage,\r\n    borderWidth: 1,\r\n    paddingHorizontal: 10,\r\n    marginRight: 8,\r\n    borderRadius: 20,\r\n    color: \"white\",\r\n    alignContent: \"center\",\r\n    justifyContent: \"center\",\r\n    // paddingVertical: 20,\r\n    paddingTop: 10,\r\n    // alignSelf: \"center\",\r\n    // textAlignVertical: \"center\",\r\n  },\r\n  button: {\r\n    width: 80,\r\n  },\r\n  replyContainer: {\r\n    flexDirection: \"row\",\r\n    borderTopWidth: StyleSheet.hairlineWidth,\r\n    borderColor: myColors.secondaryText,\r\n    padding: 10,\r\n    paddingLeft: 15,\r\n  },\r\n  reply: {\r\n    fontSize: 12,\r\n    color: myColors.secondaryText,\r\n  },\r\n  iconClose: {\r\n    marginLeft: \"auto\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    // width: 50,\r\n    padding: 8,\r\n    borderRadius: 24,\r\n    // backgroundColor: myColors.containerPressed,\r\n  },\r\n  // iconClosePressed:{\r\n  //     marginLeft: \"auto\",\r\n  //     justifyContent: \"center\",\r\n  //     alignContent: \"center\",\r\n  //     // width: 50,\r\n  //     padding: 8,\r\n  //     borderRadius: 24,\r\n  //     backgroundColor: myColors.containerPressed,\r\n  //   }\r\n});\r\n\r\nimport { supabase } from \"../../initSupabase\";\r\n\r\nconst _uploadImage = async (image, chatRoomID, oUserID) => {\r\n  //upload image to supabase using base64 to array buffer\r\n  const ext = image.uri.substring(image.uri.lastIndexOf(\".\") + 1);\r\n  console.log(ext);\r\n  if (ext != \"png\" && ext != \"jpg\" && ext != \"jpeg\") {\r\n    Alert.alert(\"Error\", \"Only png, jpg, and jpeg are supported\");\r\n    return;\r\n  }\r\n  const base64 = image.base64;\r\n  const buffer = decode(base64);\r\n\r\n  const filename = image.uri.substring(image.uri.lastIndexOf(\"/\") + 1);\r\n\r\n  const { data, error } = await supabase.storage\r\n    .from(`chatroom`)\r\n    .upload(`${chatRoomID}/${filename}`, buffer, {\r\n      contentType: `image/${ext}`,\r\n    });\r\n  if (error) {\r\n    console.log(error);\r\n    Alert.alert(\"Error\", \"Error uploading image\");\r\n    return;\r\n  }\r\n  console.log(image.uri.substring(image.uri.lastIndexOf(\"/\") + 1));\r\n  console.log(data);\r\n  const res = await createMessage({\r\n    ChatRoomID: chatRoomID,\r\n    text: data.path,\r\n    UserID: auth.currentUser.uid,\r\n    isMedia: true,\r\n  });\r\n  const user = await getUserByID(auth.currentUser.uid);\r\n  const mes = {\r\n    title: user.name,\r\n    body: \"Image\",\r\n  };\r\n  sendPushNotification({\r\n    UserID: oUserID,\r\n    message: mes,\r\n  });\r\n};\r\n\r\nexport default ChatInput;\r\n","import { View, Text, FlatList, StyleSheet, TextInput } from \"react-native\";\r\nimport React, { useEffect, useLayoutEffect } from \"react\";\r\nimport SearchListItem from \"../../components/SearchListItem\";\r\nimport { myColors } from \"../../../colors\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { AntDesign } from \"@expo/vector-icons\";\r\nimport ChatInput from \"../../components/ChatInput\";\r\n\r\nimport { listUsers } from \"../../../supabaseQueries\";\r\n\r\nconst Search = () => {\r\n  const navigation = useNavigation();\r\n  const [SearchText, setSearchText] = React.useState(\"\");\r\n\r\n  const [users, setUsers] = React.useState([]);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const fetchUsers = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const users = await listUsers();\r\n      setUsers(users);\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const querySearchText = (text) => {\r\n    console.log(text);\r\n    if (text.length === 0) {\r\n      fetchUsers();\r\n      return;\r\n    }\r\n    // setSearchText(text);\r\n    //filter users\r\n    const filteredUsers = users.filter((item) => {\r\n      return item.name.toLowerCase().includes(text.toLowerCase());\r\n    });\r\n    console.log(users);\r\n    console.log(JSON.stringify(filteredUsers, null, \"\\t\"));\r\n    setUsers([]);\r\n    setUsers(filteredUsers);\r\n  };\r\n\r\n  //might need to use useLayoutEffect\r\n  useLayoutEffect(() => {\r\n    navigation.setOptions({\r\n      headerShown: true,\r\n      headerTitle: \"\",\r\n      headerStyle: {\r\n        backgroundColor: myColors.pbgc,\r\n      },\r\n      headerLeft: () => (\r\n        <>\r\n          <AntDesign\r\n            onPress={navigation.goBack}\r\n            name=\"arrowleft\"\r\n            size={24}\r\n            color=\"white\"\r\n          />\r\n          <View style={styles.inputContainer}>\r\n            <TextInput\r\n              // autoFocus={true}\r\n              // value={SearchText}\r\n              onChangeText={(text) => querySearchText(text)}\r\n              placeholder=\"Search...\"\r\n              placeholderTextColor={\"gray\"}\r\n              style={styles.input}\r\n            />\r\n          </View>\r\n        </>\r\n      ),\r\n    });\r\n  }, [users]);\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n    console.log(\"fetching users\");\r\n  }, []);\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <FlatList\r\n        data={users}\r\n        renderItem={({ item }) => <SearchListItem user={item} />}\r\n        onRefresh={fetchUsers}\r\n        refreshing={loading}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: myColors.pbgc,\r\n    paddingVertical: 10,\r\n\r\n    justifyContent: \"center\",\r\n    // alignItems: \"center\",\r\n  },\r\n  inputContainer: {\r\n    flex: 1,\r\n    // alignItems: \"center\",\r\n    // flexDirection: \"row\",\r\n    // // backgroundColor: myColors.SecondaryMessage,\r\n    // // borderRadius: 25,\r\n    // // justifyContent: \"space-between\",\r\n    // // alignItems: \"center\",\r\n    // // paddingHorizontal: 8,\r\n    // // paddingVertical: 4,\r\n    // // marginHorizontal: 15,\r\n    // // marginVertical: 10,\r\n    // // marginBottom: 10,\r\n  },\r\n  input: {\r\n    // flex: 1,\r\n\r\n    height: 40,\r\n    width: \"80%\",\r\n    backgroundColor: myColors.SecondaryMessage,\r\n    borderColor: myColors.SecondaryMessage,\r\n    borderWidth: 1,\r\n    paddingHorizontal: 20,\r\n    marginLeft: 15,\r\n    // marginRight: 8,\r\n    borderRadius: 20,\r\n    color: \"white\",\r\n  },\r\n});\r\n\r\nexport default Search;\r\n","import {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Image,\r\n  Pressable,\r\n  Alert,\r\n  Modal,\r\n} from \"react-native\";\r\nimport React, { useState, useRef, memo } from \"react\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\nimport { myColors } from \"../../../colors\";\r\ndayjs.extend(relativeTime);\r\n\r\nimport { supabase } from \"../../initSupabase\";\r\nimport { useWindowDimensions } from \"react-native\";\r\nimport { deleteMessage } from \"../../../supabaseQueries\";\r\nimport { Swipeable } from \"react-native-gesture-handler\";\r\n\r\nconst Message = ({ message, authUser, handleReplying }) => {\r\n  // console.log(\"rerendering message\", message.text);\r\n  const [rerender, setRerender] = useState(false);\r\n\r\n  const swipeComponent = useRef(null);\r\n  const { height, width } = useWindowDimensions();\r\n  // console.log(authUser);\r\n  const isMyMessage = message?.UserID === authUser;\r\n\r\n  const _isMedia = () => {\r\n    return message?.isMedia == true ? true : false;\r\n  };\r\n  const getImageUri = () => {\r\n    const { data } = supabase.storage\r\n      .from(\"chatroom\")\r\n      .getPublicUrl(message.text);\r\n    return data.publicUrl;\r\n  };\r\n  const _handleDeleteMessage = () => {\r\n    if (isMyMessage == false) return;\r\n    if (message.text == \"⦸  This message was deleted\") return;\r\n    Alert.alert(\r\n      \"Delete Message\",\r\n      \"Are you sure you want to delete this message?\",\r\n      [\r\n        {\r\n          text: \"Cancel\",\r\n          onPress: () => console.log(\"Cancel Pressed\"),\r\n          style: \"cancel\",\r\n        },\r\n        {\r\n          text: \"OK\",\r\n          onPress: () => {\r\n            const res = deleteMessage({ id: message.id });\r\n            if (res) console.log(\"Message deleted successfully\");\r\n            else console.log(\"Message deletion failed\");\r\n            message.text = \"⦸  This message was deleted\";\r\n            message.ReplyMessageID = null;\r\n            setRerender(!rerender);\r\n          },\r\n        },\r\n      ],\r\n      { cancelable: true }\r\n    );\r\n  };\r\n  const _handleDeleteImage = () => {\r\n    if (isMyMessage == false) return;\r\n    if (message.text == \"⦸  This message was deleted\") return;\r\n    Alert.alert(\r\n      \"Delete Message\",\r\n      \"Are you sure you want to delete this message?\",\r\n      [\r\n        {\r\n          text: \"Cancel\",\r\n          onPress: () => console.log(\"Cancel Pressed\"),\r\n          style: \"cancel\",\r\n        },\r\n        {\r\n          text: \"OK\",\r\n          onPress: () => {\r\n            const res = deleteMessage({ id: message.id, isMedia: true });\r\n            if (res) console.log(\"Message deleted successfully\");\r\n            else console.log(\"Message deletion failed\");\r\n            message.text = \"⦸  This message was deleted\";\r\n            message.isMedia = false;\r\n            console.log(message);\r\n            setRerender(!rerender);\r\n          },\r\n        },\r\n      ],\r\n      { cancelable: true }\r\n    );\r\n  };\r\n  const _showImage = () => {};\r\n\r\n  const _handleReply = () => {\r\n    swipeComponent?.current?.close();\r\n    // console.log(handleReplying);\r\n    if (_isMedia()) return;\r\n    handleReplying(message);\r\n  };\r\n  const swipeContent = () => {\r\n    return (\r\n      <View\r\n        style={{\r\n          backgroundColor: myColors.pbgc,\r\n          width: \"10%\",\r\n          height: \"100%\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}>\r\n        <Text style={styles.SwipeTime}>\r\n          {dayjs(message.created_at).format(\"DD MMM YY\")}\r\n        </Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  if (_isMedia())\r\n    return (\r\n      <Swipeable\r\n        ref={swipeComponent}\r\n        renderRightActions={isMyMessage ? swipeContent : null}\r\n        renderLeftActions={isMyMessage ? null : swipeContent}\r\n        // overshootRight={false}\r\n        // overshootLeft={false}\r\n        overshootFriction={10}\r\n        onSwipeableWillOpen={_handleReply}>\r\n        <Pressable\r\n          onPress={_showImage}\r\n          onLongPress={_handleDeleteImage}\r\n          style={({ pressed }) =>\r\n            pressed\r\n              ? [\r\n                  styles.root,\r\n                  {\r\n                    padding: 5,\r\n                    backgroundColor: isMyMessage\r\n                      ? myColors.PrimaryMessagePressed\r\n                      : myColors.SecondaryMessagePressed,\r\n                    alignSelf: isMyMessage ? \"flex-end\" : \"flex-start\",\r\n                    borderBottomRightRadius: isMyMessage ? 2 : 10,\r\n                    borderBottomLeftRadius: isMyMessage ? 10 : 2,\r\n                  },\r\n                ]\r\n              : [\r\n                  styles.root,\r\n                  {\r\n                    padding: 5,\r\n                    backgroundColor: isMyMessage\r\n                      ? myColors.PrimaryMessage\r\n                      : myColors.SecondaryMessage,\r\n                    alignSelf: isMyMessage ? \"flex-end\" : \"flex-start\",\r\n                    borderBottomRightRadius: isMyMessage ? 2 : 10,\r\n                    borderBottomLeftRadius: isMyMessage ? 10 : 2,\r\n                  },\r\n                ]\r\n          }>\r\n          <Image\r\n            progressiveRenderingEnabled={true}\r\n            resizeMethod=\"scale\"\r\n            style={{ width: width * 0.7, height: 200, borderRadius: 10 }}\r\n            source={{ uri: getImageUri() }}\r\n          />\r\n          <Text\r\n            style={[\r\n              styles.time,\r\n              {\r\n                paddingTop: 5,\r\n                paddingBottom: 0,\r\n              },\r\n            ]}>\r\n            {dayjs(message.created_at).format(\"hh:mm a\")}\r\n          </Text>\r\n        </Pressable>\r\n      </Swipeable>\r\n    );\r\n\r\n  if (message.ReplyMessageID) {\r\n    const isMyReplyMessage = message?.ReplyMessage?.UserID === authUser;\r\n    const whoReplied = isMyReplyMessage\r\n      ? isMyMessage\r\n        ? \"Replied to yourself\"\r\n        : \"Replied to you\"\r\n      : isMyMessage\r\n      ? \"You replied\"\r\n      : \"Replied to themself\";\r\n    return (\r\n      <Swipeable\r\n        ref={swipeComponent}\r\n        renderRightActions={isMyMessage ? swipeContent : null}\r\n        renderLeftActions={isMyMessage ? null : swipeContent}\r\n        overshootLeft={false}\r\n        overshootRight={false}\r\n        overshootFriction={10}\r\n        onSwipeableWillOpen={_handleReply}>\r\n        <View\r\n          style={\r\n            isMyMessage\r\n              ? { alignSelf: \"flex-end\" }\r\n              : { alignSelf: \"flex-start\" }\r\n          }>\r\n          <Text\r\n            style={[\r\n              styles.replyMsgText,\r\n              isMyMessage ? { marginLeft: \"auto\" } : null,\r\n            ]}>\r\n            {whoReplied}\r\n          </Text>\r\n          <View\r\n            style={\r\n              isMyMessage\r\n                ? { flexDirection: \"row-reverse\" }\r\n                : { flexDirection: \"row\" }\r\n            }>\r\n            <View\r\n              style={{\r\n                flexDirection: \"row\",\r\n                backgroundColor: myColors.SecondaryMessage,\r\n                width: 2,\r\n                marginRight: isMyMessage ? 5 : 10,\r\n                marginLeft: isMyMessage ? 10 : 5,\r\n                borderRadius: 10,\r\n              }}>\r\n              <Text> </Text>\r\n            </View>\r\n            <Pressable\r\n              style={\r\n                isMyReplyMessage\r\n                  ? isMyMessage\r\n                    ? styles.myReplyMsg\r\n                    : [styles.myReplyMsg, { alignSelf: \"flex-start\" }]\r\n                  : styles.otherReplyMsg\r\n              }>\r\n              <Text style={styles.replyText}>\r\n                {message?.ReplyMessage?.text}\r\n              </Text>\r\n            </Pressable>\r\n          </View>\r\n        </View>\r\n\r\n        <Pressable\r\n          onLongPress={_handleDeleteMessage}\r\n          style={({ pressed }) =>\r\n            pressed\r\n              ? [\r\n                  styles.root,\r\n                  isMyMessage ? styles.myMsgPressed : styles.otherMsgPressed,\r\n                ]\r\n              : [styles.root, isMyMessage ? styles.myMsg : styles.otherMsg]\r\n          }>\r\n          <Text style={styles.text}>{message.text}</Text>\r\n          <Text style={styles.time}>\r\n            {dayjs(message.created_at).format(\"hh:mm a\")}\r\n          </Text>\r\n        </Pressable>\r\n      </Swipeable>\r\n    );\r\n  }\r\n  return (\r\n    <Swipeable\r\n      ref={swipeComponent}\r\n      renderRightActions={isMyMessage ? swipeContent : null}\r\n      renderLeftActions={isMyMessage ? null : swipeContent}\r\n      overshootFriction={10}\r\n      overshootLeft={false}\r\n      overshootRight={false}\r\n      onSwipeableWillOpen={_handleReply}>\r\n      <Pressable\r\n        onLongPress={_handleDeleteMessage}\r\n        style={({ pressed }) =>\r\n          pressed\r\n            ? [\r\n                styles.root,\r\n                isMyMessage ? styles.myMsgPressed : styles.otherMsgPressed,\r\n              ]\r\n            : [styles.root, isMyMessage ? styles.myMsg : styles.otherMsg]\r\n        }>\r\n        <Text style={styles.text}>{message.text}</Text>\r\n        <Text style={styles.time}>\r\n          {dayjs(message.created_at).format(\"hh:mm a\")}\r\n        </Text>\r\n      </Pressable>\r\n    </Swipeable>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    margin: 5,\r\n    // padding: 10,\r\n    borderRadius: 10,\r\n    maxWidth: \"80%\",\r\n    minWidth: \"20%\",\r\n    //shadow\r\n    shadowColor: \"#fff\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 1,\r\n    },\r\n    shadowOpacity: 0.18,\r\n    shadowRadius: 1.0,\r\n\r\n    elevation: 1,\r\n  },\r\n  text: {\r\n    paddingTop: 10,\r\n    paddingHorizontal: 10,\r\n    color: \"white\",\r\n  },\r\n  time: {\r\n    paddingBottom: 5,\r\n    paddingRight: 10,\r\n    fontSize: 10,\r\n    color: myColors.secondaryText,\r\n    alignSelf: \"flex-end\",\r\n  },\r\n  SwipeTime: {\r\n    paddingTop: 5,\r\n    color: myColors.secondaryText,\r\n    fontSize: 12,\r\n    alignSelf: \"center\",\r\n  },\r\n  myMsg: {\r\n    backgroundColor: myColors.PrimaryMessage,\r\n    alignSelf: \"flex-end\",\r\n    borderBottomRightRadius: 2,\r\n    borderBottomLeftRadius: 10,\r\n  },\r\n  myMsgPressed: {\r\n    backgroundColor: myColors.PrimaryMessagePressed,\r\n    alignSelf: \"flex-end\",\r\n    borderBottomRightRadius: 2,\r\n    borderBottomLeftRadius: 10,\r\n  },\r\n  otherMsg: {\r\n    backgroundColor: myColors.SecondaryMessage,\r\n    alignSelf: \"flex-start\",\r\n    borderBottomRightRadius: 10,\r\n    borderBottomLeftRadius: 2,\r\n  },\r\n  otherMsgPressed: {\r\n    backgroundColor: myColors.SecondaryMessagePressed,\r\n    alignSelf: \"flex-start\",\r\n    borderBottomRightRadius: 10,\r\n    borderBottomLeftRadius: 2,\r\n  },\r\n  myReplyMsgContainer: {\r\n    // margin: 5,\r\n    // padding: 10,\r\n    // borderRadius: 10,\r\n    maxWidth: \"80%\",\r\n    minWidth: \"20%\",\r\n    alignSelf: \"flex-end\",\r\n    // //shadow\r\n    // shadowColor: \"#fff\",\r\n    // shadowOffset: {\r\n    //   width: 0,\r\n    //   height: 1,\r\n    // },\r\n    // shadowOpacity: 0.18,\r\n    // shadowRadius: 1.0,\r\n    // elevation: 1,\r\n  },\r\n  otherReplyMsgContainer: {\r\n    maxWidth: \"80%\",\r\n    minWidth: \"20%\",\r\n    alignSelf: \"flex-start\",\r\n  },\r\n  myReplyMsg: {\r\n    backgroundColor: myColors.PrimaryMessage,\r\n    alignSelf: \"flex-end\",\r\n    borderRadius: 20,\r\n    opacity: 0.8,\r\n\r\n    minWidth: \"10%\",\r\n    // justifyContent: \"center\",\r\n    // alignContent: \"center\",\r\n  },\r\n  otherReplyMsg: {\r\n    backgroundColor: myColors.SecondaryMessage,\r\n    alignSelf: \"flex-start\",\r\n    borderRadius: 20,\r\n    minWidth: \"10%\",\r\n    opacity: 0.8,\r\n  },\r\n  replyMsgText: {\r\n    color: myColors.secondaryText,\r\n    fontSize: 12,\r\n    padding: 5,\r\n  },\r\n  replyText: {\r\n    color: \"white\",\r\n    fontSize: 14,\r\n    padding: 10,\r\n  },\r\n});\r\nexport default memo(Message);\r\n","import { View, Text, Image, StyleSheet } from \"react-native\";\r\nimport React from \"react\";\r\nimport { AntDesign } from \"@expo/vector-icons\";\r\nimport { useNavigation, CommonActions } from \"@react-navigation/native\";\r\n\r\nimport { auth } from \"../../../firebase\";\r\nimport { supabase } from \"../../initSupabase\";\r\n\r\nimport {\r\n  getUserChatRoomLastSeen,\r\n  getCommonChatRoom,\r\n  updateUserChatRoomLastSeenAt,\r\n} from \"../../../supabaseQueries\";\r\n// import { set } from \"react-hook-form\";\r\n\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\nimport { myColors } from \"../../../colors\";\r\ndayjs.extend(relativeTime);\r\n\r\nconst admin = \"usOWdwZr9XeOwdkIyjbJixXDmC12\";\r\n\r\nconst CustomHeader = ({ image, oUser, getTypingMessage }) => {\r\n  const isAdmin = auth.currentUser.uid === admin;\r\n  const navigation = useNavigation();\r\n  const [userOnline, setUserOnline] = React.useState(undefined);\r\n  const [otherUser, setOtherUser] = React.useState(oUser);\r\n  const [lastSeenAt, setLastSeenAt] = React.useState(null);\r\n  const [chatRoom, setChatRoom] = React.useState(null);\r\n  const [isTyping, setIsTyping] = React.useState(false);\r\n  const [msg, setMsg] = React.useState(null);\r\n\r\n  const fetchLastSeen = async (who) => {\r\n    // console.log(who);\r\n    if (!chatRoom) {\r\n      const res = await getCommonChatRoom({\r\n        authUserID: auth.currentUser.uid,\r\n        otherUserID: otherUser.id,\r\n      });\r\n      setChatRoom(res);\r\n      // console.log(chatRoom?.id, \"chat\");\r\n    }\r\n\r\n    if (chatRoom) {\r\n      const res = await getUserChatRoomLastSeen({\r\n        UserID: otherUser.id,\r\n        ChatRoomID: chatRoom?.id,\r\n      });\r\n      setLastSeenAt(res);\r\n      // console.log(lastSeenAt, \"lastSeen\");\r\n\r\n      updateUserChatRoomLastSeenAt({\r\n        UserID: auth.currentUser.uid,\r\n        ChatRoomID: chatRoom?.id,\r\n      });\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    fetchLastSeen(\"effetc\");\r\n  }, [chatRoom]);\r\n\r\n  React.useEffect(() => {\r\n    // Supabase client setup\r\n\r\n    const channel = supabase.channel(\"online-users\", {\r\n      config: {\r\n        presence: {\r\n          key: auth.currentUser.uid,\r\n        },\r\n      },\r\n    });\r\n\r\n    channel.on(\"presence\", { event: \"sync\" }, async () => {\r\n      const onlineUsers = channel.presenceState();\r\n      const ID = otherUser.id;\r\n      if (onlineUsers[ID]) {\r\n        const temp = onlineUsers[ID][0];\r\n        // console.log(\"Online users: \", onlineUsers, temp.online_at);\r\n        setUserOnline(\r\n          onlineUsers.hasOwnProperty(otherUser.id) &&\r\n            new Date().getTime() - temp.online_at < 10000\r\n            ? true\r\n            : false\r\n        );\r\n      } else {\r\n        setUserOnline(false);\r\n        fetchLastSeen();\r\n      }\r\n      // console.log(onlineUsers[otherUser.id] ? true : false);\r\n    });\r\n    let inter;\r\n\r\n    channel.subscribe(async (status) => {\r\n      if (status === \"SUBSCRIBED\") {\r\n        inter = setInterval(async () => {\r\n          const status = await channel.track({\r\n            online_at: new Date().getTime(),\r\n          });\r\n        }, 5000);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      clearInterval(inter);\r\n      supabase.removeChannel(channel);\r\n      // console.log(\"channel removed\");\r\n    };\r\n  }, [oUser]);\r\n  let iter;\r\n  const updateTyping = (payload) => {\r\n    if (iter) clearTimeout(iter);\r\n    console.log(payload);\r\n    if (payload) {\r\n      setIsTyping(true);\r\n      setMsg(payload.msg);\r\n      iter = setTimeout(() => {\r\n        setIsTyping(false);\r\n        setMsg(null);\r\n      }, 4000);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (chatRoom) {\r\n      const channel = supabase.channel(chatRoom.id);\r\n      channel.on(\"broadcast\", { event: \"TYPING\" }, (event) => {\r\n        console.log(auth.currentUser.uid, event.payload);\r\n        if (event.payload.userID == oUser.id) updateTyping(event.payload);\r\n      });\r\n    }\r\n  }, [chatRoom]);\r\n\r\n  return (\r\n    <View style={{ flexDirection: \"row\" }}>\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n        }}>\r\n        {/* <AntDesign\r\n          onPress={navigation.goBack}\r\n          name=\"arrowleft\"\r\n          size={24}\r\n          color=\"white\"\r\n          style={{ alignSelf: \"center\" }}\r\n        /> */}\r\n        <Image\r\n          source={{ uri: image }}\r\n          style={{\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 20,\r\n            marginLeft: 15,\r\n            marginRight: 15,\r\n          }}\r\n        />\r\n      </View>\r\n      <View style={styles.root}>\r\n        <Text style={{ color: \"white\", fontWeight: \"bold\", fontSize: 20 }}>\r\n          {otherUser.name}\r\n        </Text>\r\n        {userOnline ? (\r\n          isTyping ? (\r\n            isAdmin ? (\r\n              <Text numberOfLines={1} style={styles.online}>\r\n                {\"Typing: \" + msg}\r\n              </Text>\r\n            ) : (\r\n              <Text style={styles.online}>Typing...</Text>\r\n            )\r\n          ) : (\r\n            <Text style={styles.online}>Online</Text>\r\n          )\r\n        ) : (\r\n          lastSeenAt && (\r\n            <Text style={styles.lastSeen}>\r\n              {\"Last seen \" + dayjs(lastSeenAt).fromNow()}\r\n            </Text>\r\n          )\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"column\",\r\n    // alignItems: \"center\",\r\n    // padding: 10,\r\n    // paddingRight: 10,\r\n  },\r\n  online: {\r\n    color: myColors.PrimaryMessage,\r\n    fontSize: 10,\r\n    fontWeight: \"bold\",\r\n  },\r\n  lastSeen: {\r\n    color: \"white\",\r\n    fontSize: 10,\r\n    // fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nexport default CustomHeader;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  FlatList,\r\n  Image,\r\n  ActivityIndicator,\r\n  AppState,\r\n  useWindowDimensions,\r\n} from \"react-native\";\r\nimport React, { useCallback, useRef } from \"react\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport Message from \"../../components/Message\";\r\nimport ChatInput from \"../../components/ChatInput\";\r\n\r\nimport { myColors } from \"../../../colors\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport CustomHeader from \"../../components/CustomHeader\";\r\nimport { auth } from \"../../../firebase\";\r\nimport { supabase } from \"../../initSupabase\";\r\nimport {\r\n  getChatRoomByID,\r\n  listMessagesByChatRoom,\r\n  updateUserChatRoomLastSeen,\r\n  getUserChatRoomLastSeen,\r\n  updateUserChatRoomLastSeenAt,\r\n  getMessageByID,\r\n} from \"../../../supabaseQueries\";\r\n\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\ndayjs.extend(relativeTime);\r\n\r\nimport { FlashList } from \"@shopify/flash-list\";\r\n\r\nconst ChatRoom = ({ otherUser, chatRoomId }) => {\r\n  const route = useRoute();\r\n  const navigation = useNavigation();\r\n  const [chatRoom, setChatRoom] = useState(null);\r\n  const [authUser, setAuthUser] = useState(auth.currentUser);\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  //const [isTyping, setIsTyping] = useState(false);\r\n  const [replying, setReplying] = useState(null);\r\n  useEffect(() => {\r\n    setAuthUser(auth.currentUser);\r\n    // Auth.currentAuthenticatedUser().then((user) => setAuthUser(user));\r\n    // console.log(authUser?.attributes?.sub);\r\n  }, [chatRoom]);\r\n\r\n  const { width, height } = useWindowDimensions();\r\n  const [otherUserOnline, setOtherUserOnline] = useState(false);\r\n\r\n  // const otherUser = route.params?.user;\r\n  // const chatRoomId = route.params?.id;\r\n\r\n  //chat room info\r\n  useEffect(() => {\r\n    getChatRoomByID(chatRoomId).then((result) => setChatRoom(result));\r\n    // console.log(chatRoom);\r\n\r\n    // API.graphql(graphqlOperation(getChatRoom, { id: chatRoomId })).then(\r\n    //   (result) => setChatRoom(result.data?.getChatRoom)\r\n    // );\r\n  }, [chatRoomId]);\r\n\r\n  useEffect(() => {\r\n    // const interval = setInterval(() => {\r\n    //   console.log(\"Running task...\");\r\n    // }, 5000);\r\n\r\n    return () => {\r\n      // clearInterval(interval);\r\n      console.log(\"Cleared interval\");\r\n    };\r\n  }, []);\r\n\r\n  //fetch messages\r\n  const fetchMessages = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const messagesData = await listMessagesByChatRoom(chatRoomId, true);\r\n      setMessages(messagesData);\r\n      const lmsgOuser = messagesData.find(\r\n        (msg) => msg.UserID === otherUser?.id\r\n      );\r\n      // console.log(lmsgOuser);\r\n\r\n      updateUserChatRoomLastSeen({\r\n        ChatRoomID: chatRoomId,\r\n        UserID: auth.currentUser.uid,\r\n        LastSeenMessageID: lmsgOuser.id,\r\n      });\r\n      // console.log(dayjs(\"2023-01-20T10:23:33.705+00:00\").format(\"hh:mm A\"));\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchMessages();\r\n    //subscribe to new messages\r\n    const subscription = supabase\r\n      .channel(\"public:Message:ChatRoomID=eq.\" + chatRoomId + \"\")\r\n      .on(\r\n        \"postgres_changes\",\r\n        {\r\n          event: \"INSERT\",\r\n          schema: \"public\",\r\n          table: \"Message\",\r\n          filter: `ChatRoomID=eq.${chatRoomId}`,\r\n        },\r\n        async (payload) => {\r\n          // console.log(\"Message payload\", payload);\r\n          //setIsTyping(false);\r\n          const res = await getMessageByID(payload.new.id);\r\n          setMessages((prevMessages) => [res, ...prevMessages]);\r\n        }\r\n      )\r\n      .on(\r\n        \"postgres_changes\",\r\n        {\r\n          event: \"UPDATE\",\r\n          schema: \"public\",\r\n          table: \"Message\",\r\n          filter: `ChatRoomID=eq.${chatRoomId}`,\r\n        },\r\n        async (payload) => {\r\n          // console.log(\"Message payload\", payload);\r\n          //setIsTyping(false);\r\n          //Update the deleted message only\r\n          setMessages((prevMessages) => {\r\n            //find the index of the message to be updated\r\n            const index = prevMessages.findIndex(\r\n              (msg) => msg.id === payload.new.id\r\n            );\r\n            //if the message is found, update it\r\n            if (index >= 0) {\r\n              const updatedMessages = [...prevMessages];\r\n              updatedMessages[index] = payload.new;\r\n              return updatedMessages;\r\n            }\r\n            //if the message is not found, return the previous messages\r\n            return prevMessages;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(subscription);\r\n      supabase.removeAllChannels();\r\n      console.log(\"Removed subscription\");\r\n    };\r\n  }, [chatRoomId]);\r\n  const chatInput = useRef(null);\r\n  const [msg, setMsg] = useState(\"\");\r\n  useEffect(() => {\r\n    const channel = supabase.channel(chatRoomId);\r\n    channel.subscribe(async (status) => {\r\n      if (status === \"SUBSCRIBED\") {\r\n        const status = await channel.send({\r\n          type: \"broadcast\",\r\n          event: \"TYPING\",\r\n          payload: {\r\n            userID: auth.currentUser.uid,\r\n            msg: msg,\r\n          },\r\n        });\r\n        console.log(status);\r\n      }\r\n    });\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n      // console.log(\"channel removed1\");\r\n    };\r\n  }, [chatRoomId, msg]);\r\n\r\n  const _handleFocus = (state) => {\r\n    if (state === \"active\") fetchMessages();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sub = AppState.addEventListener(\"change\", _handleFocus);\r\n    return () => sub.remove();\r\n  }, []);\r\n\r\n  const handleReplying = useCallback((msg) => {\r\n    setReplying(msg);\r\n    console.log(msg);\r\n  });\r\n  const handleReplyingCancel = () => {\r\n    setReplying(null);\r\n  };\r\n\r\n  const getTypingMessage = useCallback(() => {\r\n    return chatInput?.current;\r\n  }, [chatRoomId]);\r\n\r\n  const onTyping = (text) => {\r\n    setMsg(text);\r\n    //if (channel) updateMyTypingStatus(channel, chatRoomId, text);\r\n  };\r\n  useEffect(() => {\r\n    navigation.setOptions({\r\n      title: null,\r\n\r\n      headerStyle: {\r\n        backgroundColor: myColors.pbgc,\r\n      },\r\n\r\n      headerLeft: () => (\r\n        <CustomHeader\r\n          getTypingMessage={getTypingMessage}\r\n          image={otherUser?.image}\r\n          oUser={otherUser}\r\n        />\r\n      ),\r\n    });\r\n  }, [otherUser.name]);\r\n\r\n  if (!chatRoom) {\r\n    console.table({ otherUser, chatRoomId });\r\n    return (\r\n      <View style={styles.root}>\r\n        <ActivityIndicator />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const getItemLayout = (data, index) => ({\r\n    length: width * 0.8,\r\n    offset: 50 * index,\r\n    index,\r\n  });\r\n  const renderItem = ({ item }) => (\r\n    <Message\r\n      message={item}\r\n      authUser={authUser.uid}\r\n      handleReplying={handleReplying}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <View style={styles.header}>\r\n        <CustomHeader\r\n          getTypingMessage={getTypingMessage}\r\n          image={otherUser?.image}\r\n          oUser={otherUser}\r\n        />\r\n      </View>\r\n      <View style={styles.list}>\r\n        <FlashList\r\n          showsVerticalScrollIndicator={false}\r\n          data={messages}\r\n          // extraData={messages}\r\n          renderItem={renderItem}\r\n          inverted\r\n          onRefresh={fetchMessages}\r\n          refreshing={loading}\r\n          estimatedItemSize={100}\r\n          // estimatedListSize={(height, width)}\r\n          drawDistance={200}\r\n        />\r\n      </View>\r\n\r\n      {/* {isTyping && (\r\n        <View style={styles.list}>\r\n          <Message\r\n            message={\r\n              authUser.uid == \"usOWdwZr9XeOwdkIyjbJixXDmC12\"\r\n                ? { text: \"Typing: \" + omsg }\r\n                : { text: \"...\" }\r\n            }\r\n            authUser={authUser.uid}\r\n          />\r\n        </View>\r\n      )} */}\r\n\r\n      <View style={{ paddingTop: 10 }}>\r\n        <ChatInput\r\n          // ref={chatInput}\r\n          chatRoom={chatRoom}\r\n          otherUser={otherUser}\r\n          onTyping={onTyping}\r\n          replying={replying}\r\n          handleReplyingCancel={handleReplyingCancel}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: myColors.pbgc,\r\n  },\r\n  list: {\r\n    flex: 1,\r\n    paddingHorizontal: 10,\r\n  },\r\n  header: {\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nexport default ChatRoom;\r\n","import {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ScrollView,\r\n  FlatList,\r\n  RefreshControl,\r\n  AppState,\r\n  useWindowDimensions,\r\n} from \"react-native\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport ChatListItem from \"../../components/ChatListItem\";\r\nimport { myColors } from \"../../../colors\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport HomeHeader from \"../../components/HomeHeader\";\r\nimport { auth } from \"../../../firebase\";\r\n\r\nimport { listUserChatRooms } from \"../../../supabaseQueries\";\r\nimport { supabase } from \"../../initSupabase\";\r\n\r\n// // import { registerForPushNotificationsAsync } from \"../../notification\";\r\nimport * as Notifications from \"expo-notifications\";\r\n\r\nimport { addUserPushToken } from \"../../../supabaseQueries\";\r\nimport Search from \"../Search\";\r\nimport ChatRoom from \"../ChatRoom\";\r\n// import { Linking } from \"react-native\";\r\n// import * as Linking from \"expo-linking\";\r\n\r\nconst Home = () => {\r\n  const { width, height } = useWindowDimensions();\r\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\r\n  useEffect(() => {\r\n    const subscription = Notifications.addPushTokenListener(addUserPushToken);\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  //open app when notification pressed\r\n  // React.useEffect(() => {\r\n  //   const subscription = Notifications.addNotificationResponseReceivedListener(\r\n  //     (response) => {\r\n  //       Linking.openURL(\"com.wca.myapp://\");\r\n  //     }\r\n  //   );\r\n  //   return () => subscription.remove();\r\n  // }, []);\r\n\r\n  const appState = useRef(AppState.currentState);\r\n\r\n  // const [appStateVisible, setAppStateVisible] = useState(appState.current);\r\n  const _handleAppStateChange = (nextAppState) => {\r\n    if (\r\n      appState.current.match(/inactive|background/) &&\r\n      nextAppState === \"active\"\r\n    ) {\r\n      console.log(\"App has come to the foreground!\");\r\n      setRerender(!rerender);\r\n      Notifications.dismissAllNotificationsAsync();\r\n    }\r\n    if (appState.current === \"background\") {\r\n      // console.log(\"App is in background\");\r\n    }\r\n    appState.current = nextAppState;\r\n    // setAppStateVisible(appState.current);\r\n    // console.log(\"AppState\", appState.current);\r\n  };\r\n\r\n  useEffect(() => {\r\n    AppState.addEventListener(\"change\", _handleAppStateChange);\r\n  }, []);\r\n\r\n  const navigation = useNavigation();\r\n  // const [chatRoomId, setChatRoomId] = useState(null);\r\n  // const [otherUser, setOtherUser] = useState(null);\r\n  const [selectedChatRoom, setSelectedChatRoom] = useState(null);\r\n\r\n  const [chatRooms, setChatRooms] = React.useState([]);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [rerender, setRerender] = React.useState(false);\r\n  useEffect(() => {\r\n    navigation.setOptions({\r\n      headerShown: true,\r\n\r\n      title: \"Chats\",\r\n      headerStyle: {\r\n        backgroundColor: myColors.pbgc,\r\n      },\r\n      headerTintColor: \"white\",\r\n      headerTitleAlign: \"left\",\r\n      headerRight: () => <HomeHeader />,\r\n    });\r\n  }, []);\r\n\r\n  const fetchChatRooms = async () => {\r\n    // console.log(supabase.getChannels());\r\n    setRerender(!rerender);\r\n    setLoading(true);\r\n\r\n    const chatRooms = await listUserChatRooms(auth.currentUser.uid);\r\n    // console.log(chatRooms);\r\n\r\n    //sort by last message created_at\r\n    const sortedRooms = chatRooms.sort((a, b) => {\r\n      return (\r\n        new Date(b.ChatRoom.LastMessage.created_at) -\r\n        new Date(a.ChatRoom.LastMessage.created_at)\r\n      );\r\n    });\r\n    setChatRooms([]);\r\n    setChatRooms([...sortedRooms]);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const subscription = supabase\r\n      .channel(\"public:UserChatRoom:UserID=eq.\" + auth.currentUser.uid)\r\n      .on(\r\n        \"postgres_changes\",\r\n        {\r\n          event: \"INSERT\",\r\n          schema: \"public\",\r\n          table: \"UserChatRoom\",\r\n          filter: `UserID=eq.${auth.currentUser.uid}`,\r\n        },\r\n        async (payload) => {\r\n          console.log(\"newChatRoom\", payload);\r\n\r\n          fetchChatRooms();\r\n        }\r\n      );\r\n    return () => {\r\n      // console.log(\"left\");\r\n      supabase.removeChannel(subscription);\r\n    };\r\n  }, [auth.currentUser.uid]);\r\n\r\n  //fetch chatrooms\r\n  useEffect(() => {\r\n    fetchChatRooms();\r\n  }, []);\r\n\r\n  const onSearchPressed = () => {\r\n    navigation.navigate(\"Search\");\r\n  };\r\n\r\n  // console.log(chatRooms);\r\n\r\n  if (\r\n    (chatRooms?.length === 1 &&\r\n      chatRooms[0]?.ChatRoom?.LastMessageID ===\r\n        \"b15f0db2-87f6-4358-874a-4297ee170240\") ||\r\n    chatRooms?.length === 0\r\n  ) {\r\n    return (\r\n      <ScrollView\r\n        contentContainerStyle={styles.emptyChats}\r\n        refreshControl={\r\n          <RefreshControl refreshing={loading} onRefresh={fetchChatRooms} />\r\n        }>\r\n        <Text style={{ color: \"white\" }}>\r\n          No chats yet 😅. Start a{\" \"}\r\n          <Text\r\n            onPress={onSearchPressed}\r\n            style={{ textDecorationLine: \"underline\" }}>\r\n            new chat.\r\n          </Text>\r\n        </Text>\r\n      </ScrollView>\r\n    );\r\n  }\r\n\r\n  return (\r\n    // // <ScrollView style={{ flex: 1, height: \"100%\" }}>\r\n    // //<ScrollView showsVerticalScrollIndicator={false}>\r\n    // <View style={styles.root}>\r\n    //   <FlatList\r\n    //     data={chatRooms}\r\n    //     extraData={rerender}\r\n    //     renderItem={({ item }) => <ChatListItem chat={item} />}\r\n    //     onRefresh={fetchChatRooms}\r\n    //     refreshing={loading}\r\n    //   />\r\n    // </View>\r\n    // //</ScrollView>\r\n    // // </ScrollView>\r\n    <View style={[styles.root, { minHeight: height - 1 }]}>\r\n      <View\r\n        style={[\r\n          styles.homeleft,\r\n          {\r\n            width: width * 0.3,\r\n            height: height - 15,\r\n          },\r\n        ]}>\r\n        <HomeHeader />\r\n\r\n        <FlatList\r\n          data={chatRooms}\r\n          extraData={rerender}\r\n          renderItem={({ item }) => (\r\n            <ChatListItem\r\n              chat={item}\r\n              onPress={(otherUser, chatRoomId) =>\r\n                setSelectedChatRoom({ otherUser, chatRoomId })\r\n              }\r\n            />\r\n          )}\r\n          onRefresh={fetchChatRooms}\r\n          refreshing={loading}\r\n        />\r\n      </View>\r\n\r\n      {selectedChatRoom ? (\r\n        <View\r\n          style={[\r\n            styles.chatRoom,\r\n            { width: width * 0.7 - 30, height: height - 15 },\r\n          ]}>\r\n          <ChatRoom\r\n            otherUser={selectedChatRoom.otherUser}\r\n            chatRoomId={selectedChatRoom.chatRoomId}\r\n          />\r\n        </View>\r\n      ) : (\r\n        <View\r\n          style={[\r\n            styles.noChatRoom,\r\n            {\r\n              width: width * 0.7 - 30,\r\n              height: height - 15,\r\n            },\r\n          ]}>\r\n          <Text style={styles.noChat}>\r\n            Open a chat room and start a conversation !\r\n          </Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    backgroundColor: myColors.pbgc,\r\n    paddingVertical: 5,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingHorizontal: 15,\r\n  },\r\n  emptyChats: {\r\n    flex: 1,\r\n    backgroundColor: myColors.pbgc,\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  noChat: {\r\n    color: \"white\",\r\n    fontSize: 20,\r\n    textAlign: \"center\",\r\n  },\r\n  homeleft: {\r\n    // borderColor: \"white\",\r\n    // borderWidth: 1,\r\n    height: \"100%\",\r\n  },\r\n  homeleftHeader: {\r\n    height: 50,\r\n  },\r\n  noChatRoom: {\r\n    // borderColor: \"white\",\r\n    // borderWidth: 1,\r\n    height: \"100%\",\r\n    alignContent: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  chatRoom: {\r\n    // borderColor: \"white\",\r\n    // borderWidth: 1,\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\nexport default Home;\r\n","import {\r\n  View,\r\n  Alert,\r\n  Text,\r\n  StyleSheet,\r\n  useWindowDimensions,\r\n} from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport CustomInput from \"../../components/CustomInput/CustomInput\";\r\nimport CustomButton from \"../../components/CustomButton\";\r\nimport { myColors } from \"../../../colors\";\r\nimport SocialSignInButtons from \"../../components/SocialSignInButtons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\n\r\nimport { auth } from \"../../../firebase\";\r\nimport { sendPasswordResetEmail } from \"firebase/auth\";\r\n\r\nconst ResetPassword = () => {\r\n  const route = useRoute();\r\n  const { control, handleSubmit, watch } = useForm();\r\n\r\n  const email = watch(\"email\");\r\n  const navigation = useNavigation();\r\n\r\n  const onSendPressed = async (data) => {\r\n    try {\r\n      //aws\r\n      // const response = await Auth.forgotPassword(data.email);\r\n\r\n      //firebase\r\n      await sendPasswordResetEmail(auth, data.email);\r\n      Alert.alert(\"Link sent\", \"Check your email to reset your password\");\r\n      navigation.navigate(\"SignIn\", { email: data.email });\r\n    } catch (error) {\r\n      Alert.alert(\"Oops\", error.message);\r\n    }\r\n  };\r\n\r\n  //   const onResendPressed = async () => {\r\n  //     try {\r\n  //       const response = await Auth.resendSignUp(email);\r\n  //       Alert.alert(\"Success\", \"Code resent\");\r\n  //     } catch (error) {\r\n  //       Alert.alert(\"Oops\", error.message);\r\n  //     }\r\n  //   };\r\n  const onSignInPressed = () => {\r\n    console.warn(\"Sign in\");\r\n    navigation.navigate(\"SignIn\");\r\n  };\r\n\r\n  const { width, height } = useWindowDimensions();\r\n  const [Code, setCode] = useState(\"\");\r\n  const [ConfirmPassword, setConfirmPassword] = useState(\"\");\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.title}>Reset your password</Text>\r\n      <View style={styles.container}>\r\n        <CustomInput\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          control={control}\r\n          rules={{ required: \"Email is required\" }}\r\n        />\r\n\r\n        <CustomButton onPress={handleSubmit(onSendPressed)} text=\"Send\" />\r\n        <View style={styles.btnContainer}>\r\n          <View>\r\n            <CustomButton\r\n              text=\"Back to Sign in\"\r\n              onPress={onSignInPressed}\r\n              type=\"SECONDARY\"\r\n            />\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: myColors.pbgc,\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n  },\r\n  container: {\r\n    width: \"100%\",\r\n    borderColor: \"white\",\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    marginVertical: 20,\r\n    padding: 20,\r\n    backgroundColor: myColors.sbgc,\r\n  },\r\n  link: {\r\n    fontWeight: \"bold\",\r\n    paddingVertical: 10,\r\n    fontSize: 15,\r\n    color: \"white\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    textDecorationLine: \"underline\",\r\n    textDecorationColor: \"white\",\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n    margin: 10,\r\n  },\r\n  text: {\r\n    width: \"100%\",\r\n    // justifyContent: \"space-around\",\r\n    // marginHorizontal: 10,\r\n    color: \"#707271\",\r\n    fontSize: 12,\r\n    // textAlign: \"center\",\r\n    marginVertical: 10,\r\n  },\r\n  btnContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n});\r\n\r\nexport default ResetPassword;\r\n","import {\r\n  View,\r\n  Alert,\r\n  Text,\r\n  StyleSheet,\r\n  useWindowDimensions,\r\n} from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport CustomInput from \"../../components/CustomInput/CustomInput\";\r\nimport CustomButton from \"../../components/CustomButton\";\r\nimport { myColors } from \"../../../colors\";\r\nimport SocialSignInButtons from \"../../components/SocialSignInButtons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\n\r\nconst NewPassword = () => {\r\n  const route = useRoute();\r\n  const { control, handleSubmit, watch } = useForm();\r\n\r\n  const email = route?.params?.email;\r\n  const pwd = watch(\"password\");\r\n  const navigation = useNavigation();\r\n\r\n  const onSubmitPressed = async (data) => {\r\n    // try {\r\n    //   const response = await Auth.forgotPasswordSubmit(\r\n    //     email,\r\n    //     data.code,\r\n    //     data.password\r\n    //   );\r\n    //   navigation.popToTop();\r\n    // } catch (error) {\r\n    //   Alert.alert(\"Oops\", error.message);\r\n    // }\r\n  };\r\n\r\n  //   const onResendPressed = async () => {\r\n  //     try {\r\n  //       const response = await Auth.resendSignUp(email);\r\n  //       Alert.alert(\"Success\", \"Code resent\");\r\n  //     } catch (error) {\r\n  //       Alert.alert(\"Oops\", error.message);\r\n  //     }\r\n  //   };\r\n  const onSignInPressed = () => {\r\n    navigation.navigate(\"SignIn\");\r\n  };\r\n\r\n  const { width, height } = useWindowDimensions();\r\n  const [Code, setCode] = useState(\"\");\r\n  const [ConfirmPassword, setConfirmPassword] = useState(\"\");\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.title}>Reset your password</Text>\r\n      <View style={styles.container}>\r\n        <CustomInput\r\n          name=\"code\"\r\n          placeholder=\"Enter your confirmation code\"\r\n          control={control}\r\n          rules={{ required: \"Confirmation code is required\" }}\r\n        />\r\n\r\n        <CustomInput\r\n          name=\"password\"\r\n          placeholder=\"Enter your new password\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Password is required\",\r\n            minLength: {\r\n              value: 6,\r\n              message: \"Password must be at least 6 characters\",\r\n            },\r\n          }}\r\n          secure={true}\r\n        />\r\n        <CustomInput\r\n          name=\"confirmPassword\"\r\n          placeholder=\"Confirm new Password\"\r\n          control={control}\r\n          rules={{\r\n            required: \"Passwords do not match\",\r\n            validate: (value) => value === pwd || \"Passwords do not match\",\r\n          }}\r\n          secure={true}\r\n        />\r\n\r\n        <CustomButton onPress={handleSubmit(onSubmitPressed)} text=\"Submit\" />\r\n        <View style={styles.btnContainer}>\r\n          <View>\r\n            <CustomButton\r\n              text=\"Back to Sign in\"\r\n              onPress={onSignInPressed}\r\n              type=\"SECONDARY\"\r\n            />\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: myColors.pbgc,\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n  },\r\n  container: {\r\n    width: \"100%\",\r\n    borderColor: \"white\",\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    marginVertical: 20,\r\n    padding: 20,\r\n    backgroundColor: myColors.sbgc,\r\n  },\r\n  link: {\r\n    fontWeight: \"bold\",\r\n    paddingVertical: 10,\r\n    fontSize: 15,\r\n    color: \"white\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    textDecorationLine: \"underline\",\r\n    textDecorationColor: \"white\",\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n    margin: 10,\r\n  },\r\n  text: {\r\n    width: \"100%\",\r\n    // justifyContent: \"space-around\",\r\n    // marginHorizontal: 10,\r\n    color: \"#707271\",\r\n    fontSize: 12,\r\n    // textAlign: \"center\",\r\n    marginVertical: 10,\r\n  },\r\n  btnContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n});\r\n\r\nexport default NewPassword;\r\n","import {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Pressable,\r\n  Image,\r\n  TextInput,\r\n  FlatList,\r\n} from \"react-native\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\nimport { myColors } from \"../../../colors\";\r\nimport { FontAwesome, Feather } from \"@expo/vector-icons\";\r\nimport { FontAwesome5 } from \"@expo/vector-icons\";\r\n\r\nimport { auth } from \"../../../firebase\";\r\nimport { signOut } from \"firebase/auth\";\r\n\r\nimport { supabase } from \"../../initSupabase\";\r\n\r\nimport { getUserByID } from \"../../../supabaseQueries\";\r\n\r\nconst Settings = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n  const [image, setImage] = useState(null);\r\n  const [selecting, setSelecting] = useState(false);\r\n\r\n  const navigation = useNavigation();\r\n  const [editable, setEditable] = useState(false);\r\n  const refInputName = useRef(null);\r\n  const onSignOutPressed = () => {\r\n    // Auth.signOut();\r\n    signOut(auth);\r\n  };\r\n\r\n  const fetchUser = async () => {\r\n    const userInfo = auth.currentUser;\r\n    const userData = await getUserByID(userInfo.uid);\r\n\r\n    // const userInfo = await Auth.currentAuthenticatedUser();\r\n    // const userData = await API.graphql(\r\n    //   graphqlOperation(getUser, { id: userInfo.attributes.sub })\r\n    // );\r\n    // console.log(userData.data.getUser);\r\n    setUser(userData);\r\n    setName(userData.name);\r\n    setImage(userData.image);\r\n    setStatus(userData.status);\r\n  };\r\n  useEffect(() => {\r\n    fetchUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    navigation.setOptions({\r\n      headerTitle: \"Settings\",\r\n      headerTintColor: \"white\",\r\n      headerStyle: {\r\n        backgroundColor: myColors.pbgc,\r\n        color: \"white\",\r\n      },\r\n      headerBackTitle: \"Back\",\r\n      headerRight: () => (\r\n        <>\r\n          <Text\r\n            style={{\r\n              color: \"white\",\r\n              fontSize: 20,\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onPress={onSignOutPressed}>\r\n            Sign Out\r\n          </Text>\r\n        </>\r\n      ),\r\n    });\r\n  }, []);\r\n\r\n  const handelImageChange = async (item) => {\r\n    console.log(\"image changed\");\r\n    // refInputName.current?.blur();\r\n    const { data, error } = await supabase\r\n      .from(\"User\")\r\n      .update({\r\n        image: `https://notjustdev-dummy.s3.us-east-2.amazonaws.com/avatars/${item}.jpg`,\r\n      })\r\n      .eq(\"id\", user.id)\r\n      .select();\r\n\r\n    console.log(data, error);\r\n    fetchUser();\r\n  };\r\n\r\n  const handelStatusChange = async () => {\r\n    if (status.length < 3) {\r\n      alert(\"Status must be atleast 3 characters long\");\r\n      setStatus(user.status);\r\n      return;\r\n    }\r\n    await supabase.from(\"User\").update({ status: status }).eq(\"id\", user.id);\r\n    fetchUser();\r\n  };\r\n\r\n  const handelNameChange = async () => {\r\n    if (name.length < 3) {\r\n      alert(\"Name must be atleast 3 characters long\");\r\n      setName(user.name);\r\n      return;\r\n    }\r\n    await supabase.from(\"User\").update({ name: name }).eq(\"id\", user.id);\r\n    fetchUser();\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      {selecting ? (\r\n        <View\r\n          style={{\r\n            marginTop: 10,\r\n            height: \"50%\",\r\n            marginBottom: 10,\r\n            // backgroundColor: \"white\",\r\n            // width: \"100%\",\r\n          }}>\r\n          <FlatList\r\n            // horizontal={true}\r\n            // style={{ width: \"100%\", height: 100 }}\r\n            data={[\"1\", \"2\", \"3\", \"4\"]}\r\n            renderItem={({ item }) => (\r\n              <Pressable\r\n                onPress={() => {\r\n                  setSelecting(false);\r\n                  setImage(\r\n                    `https://notjustdev-dummy.s3.us-east-2.amazonaws.com/avatars/${item}.jpg`\r\n                  );\r\n                  handelImageChange(item);\r\n                }}\r\n                style={{\r\n                  // backgroundColor: \"red\",\r\n                  padding: 10,\r\n                  // justifyContent: \"center\",\r\n                  // alignItems: \"center\",\r\n                  height: \"80%\",\r\n                  // marginVertical: 10,\r\n                }}>\r\n                <Image\r\n                  source={{\r\n                    uri: `https://notjustdev-dummy.s3.us-east-2.amazonaws.com/avatars/${item}.jpg`,\r\n                  }}\r\n                  style={{\r\n                    borderRadius: 100,\r\n                    width: 150,\r\n                    height: 150,\r\n                  }}\r\n                  // resizeMode=\"cover\"\r\n                />\r\n              </Pressable>\r\n            )}\r\n            numColumns={2}\r\n            columnWrapperStyle={{ justifyContent: \"space-around\" }}\r\n          />\r\n        </View>\r\n      ) : (\r\n        <Pressable\r\n          style={styles.imageContainer}\r\n          onPress={() => setSelecting(true)}>\r\n          <Image source={{ uri: image }} style={styles.image} />\r\n        </Pressable>\r\n      )}\r\n\r\n      <Pressable\r\n        style={({ pressed }) =>\r\n          pressed ? styles.containerPressed : styles.container\r\n        }\r\n        onPress={() => refInputName.current?.focus()}>\r\n        <FontAwesome\r\n          style={styles.icon1}\r\n          name=\"user\"\r\n          size={24}\r\n          color={myColors.secondaryText}\r\n        />\r\n        <View style={styles.content}>\r\n          <Text style={styles.title}>Name</Text>\r\n          <TextInput\r\n            style={styles.subTitle}\r\n            ref={refInputName}\r\n            maxLength={20}\r\n            onChangeText={(text) => setName(text)}\r\n            onSubmitEditing={handelNameChange}\r\n            value={name}\r\n          />\r\n          <Text\r\n            style={{\r\n              color: myColors.secondaryText,\r\n              marginTop: 10,\r\n              fontSize: 12,\r\n            }}>\r\n            This is not your username or pin. This name will be visible to your\r\n            chat contacts.\r\n          </Text>\r\n        </View>\r\n        <FontAwesome5\r\n          style={styles.icon2}\r\n          name=\"pen\"\r\n          size={18}\r\n          color={myColors.secondaryText}\r\n        />\r\n      </Pressable>\r\n      <Pressable\r\n        style={({ pressed }) =>\r\n          pressed ? styles.containerPressed : styles.container\r\n        }>\r\n        <Feather\r\n          style={styles.icon1}\r\n          name=\"info\"\r\n          size={24}\r\n          color={myColors.secondaryText}\r\n        />\r\n        <View style={styles.content}>\r\n          <Text style={styles.title}>About</Text>\r\n          <TextInput\r\n            style={styles.subTitle}\r\n            maxLength={30}\r\n            onChangeText={(text) => setStatus(text)}\r\n            onSubmitEditing={handelStatusChange}\r\n            value={status}\r\n          />\r\n        </View>\r\n        <FontAwesome5\r\n          style={styles.icon2}\r\n          name=\"pen\"\r\n          size={18}\r\n          color={myColors.secondaryText}\r\n        />\r\n      </Pressable>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    backgroundColor: myColors.pbgc,\r\n    flex: 1,\r\n  },\r\n  imageContainer: {\r\n    height: 200,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginVertical: 10,\r\n  },\r\n  image: {\r\n    borderRadius: 100,\r\n    width: \"50%\",\r\n    height: \"90%\",\r\n  },\r\n  container: {\r\n    // backgroundColor: \"#1e1e1e\",\r\n    flexDirection: \"row\",\r\n    marginHorizontal: 10,\r\n    marginVertical: 5,\r\n    paddingVertical: 10,\r\n    // marginBottom: 20,\r\n    // height: 130,\r\n  },\r\n  containerPressed: {\r\n    flexDirection: \"row\",\r\n    marginHorizontal: 10,\r\n    marginVertical: 5,\r\n    paddingVertical: 10,\r\n    // marginBottom: 20,\r\n    // height: 130,\r\n    backgroundColor: \"#1e1e1e\",\r\n    borderRadius: 10,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    height: \"105%\",\r\n    borderBottomWidth: StyleSheet.hairlineWidth,\r\n    borderBottomColor: \"grey\",\r\n  },\r\n  icon1: {\r\n    width: \"14%\",\r\n    height: 50,\r\n    // borderRadius: 30,\r\n    marginRight: 10,\r\n    textAlign: \"center\",\r\n  },\r\n  icon2: {\r\n    // paddingTop: 10,\r\n    width: \"14%\",\r\n    // height: 50,\r\n    // borderRadius: 30,\r\n    marginRight: 10,\r\n    textAlign: \"center\",\r\n  },\r\n  row: {\r\n    flexDirection: \"row\",\r\n    marginBottom: 5,\r\n  },\r\n  name: {\r\n    // fontWeight: \"bold\",\r\n    fontSize: 16,\r\n    color: myColors.secondaryText,\r\n    flex: 1,\r\n  },\r\n  title: {\r\n    color: myColors.secondaryText,\r\n    fontSize: 14,\r\n  },\r\n  subTitle: {\r\n    fontSize: 16,\r\n    color: \"white\",\r\n  },\r\n});\r\n\r\nexport default Settings;\r\n","import { View, Text, ActivityIndicator, StyleSheet } from \"react-native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\n\r\nimport SignIn from \"../../screens/SignIn/SignIn\";\r\nimport SignUp from \"../../screens/SignUp/SignUp\";\r\nimport ConfirmEmail from \"../../screens/ConfirmEmail\";\r\nimport Home from \"../../screens/Home\";\r\nimport ResetPassword from \"../../screens/ResetPassword\";\r\nimport NewPassword from \"../../screens/NewPassword\";\r\nimport ChatRoom from \"../../screens/ChatRoom\";\r\nimport { myColors } from \"../../../colors\";\r\nimport Settings from \"../../screens/Settings\";\r\nimport Search from \"../../screens/Search\";\r\n\r\nimport { auth } from \"../../../firebase\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\n\r\n// import { Linking } from \"react-native\";\r\n// import * as Notifications from \"expo-notifications\";\r\n\r\nconst Navigation = () => {\r\n  const [user, setUser] = useState(undefined);\r\n  const checkUser = async () => {\r\n    onAuthStateChanged(auth, (u) => {\r\n      if (u && u.emailVerified) {\r\n        setUser(true);\r\n        // getUserData();\r\n      } else {\r\n        setUser(false);\r\n        // setUserData(null);\r\n      }\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    checkUser();\r\n  }, []);\r\n  // useEffect(() => {\r\n  //   const listener = Hub.listen(\"auth\", (data) => {\r\n  //     if (data.payload.event === \"signIn\" || data.payload.event === \"signOut\") {\r\n  //       checkUser();\r\n  //     }\r\n  //   });\r\n  //   return () => {\r\n  //     listener();\r\n  //   };\r\n  // }, []);\r\n  if (user === undefined)\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n        <ActivityIndicator />\r\n      </View>\r\n    );\r\n  const Stack = createNativeStackNavigator();\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator\r\n        screenOptions={{\r\n          headerShown: true,\r\n        }}>\r\n        {user ? (\r\n          <>\r\n            <Stack.Screen name=\"Home\" component={Home} />\r\n            <Stack.Screen name=\"ChatRoom\" component={ChatRoom} />\r\n            <Stack.Screen name=\"Search\" component={Search} />\r\n            <Stack.Screen name=\"Settings\" component={Settings} />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Stack.Screen\r\n              name=\"SignIn\"\r\n              component={SignIn}\r\n              options={{ headerShown: false }}\r\n            />\r\n            <Stack.Screen\r\n              name=\"SignUp\"\r\n              component={SignUp}\r\n              options={{ headerShown: false }}\r\n            />\r\n            <Stack.Screen\r\n              name=\"ConfirmEmail\"\r\n              component={ConfirmEmail}\r\n              options={{ headerShown: false }}\r\n            />\r\n            <Stack.Screen\r\n              name=\"ResetPassword\"\r\n              component={ResetPassword}\r\n              options={{ headerShown: false }}\r\n            />\r\n            <Stack.Screen\r\n              name=\"NewPassword\"\r\n              component={NewPassword}\r\n              options={{ headerShown: false }}\r\n            />\r\n          </>\r\n        )}\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {},\r\n});\r\n\r\nexport default Navigation;\r\n\r\n/*linking={{\r\n        config: {\r\n          // Configuration for linking\r\n        },\r\n        async getInitialURL() {\r\n          // First, you may want to do the default deep link handling\r\n          // Check if app was opened from a deep link\r\n          const url = await Linking.getInitialURL();\r\n\r\n          if (url != null) {\r\n            return url;\r\n          }\r\n\r\n          // Handle URL from expo push notifications\r\n          const response =\r\n            await Notifications.getLastNotificationResponseAsync();\r\n          const url1 = \"com.wca.myapp://\";\r\n\r\n          return url1;\r\n        },\r\n        subscribe(listener) {\r\n          const onReceiveURL = ({ url }) => listener(url);\r\n\r\n          // Listen to incoming links from deep linking\r\n          const surl = Linking.addEventListener(\"url\", onReceiveURL);\r\n\r\n          // Listen to expo push notifications\r\n          const subscription =\r\n            Notifications.addNotificationResponseReceivedListener(\r\n              (response) => {\r\n                const url = \"com.wca.myapp://\";\r\n\r\n                // Any custom logic to see whether the URL needs to be handled\r\n                //...\r\n\r\n                // Let React Navigation handle the URL\r\n                listener(url);\r\n              }\r\n            );\r\n\r\n          return () => {\r\n            // Clean up the event listeners\r\n            surl.remove();\r\n            subscription.remove();\r\n          };\r\n        },\r\n      }}\r\n\r\n*/\r\n","import \"react-native-gesture-handler\";\n\nimport { StyleSheet, SafeAreaView, StatusBar, LogBox } from \"react-native\";\nimport React from \"react\";\nimport Navigation from \"./src/components/Navigation\";\nimport { myColors } from \"./colors\";\n\nimport * as NavigationBar from \"expo-navigation-bar\";\n\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\n\nconst App = () => {\n  // Auth.signOut();\n  React.useEffect(() => {\n    LogBox.ignoreLogs([\n      \"AsyncStorage has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-async-storage/async-storage' instead of 'react-native'. See https://github.com/react-native-async-storage/async-storage\",\n    ]);\n  }, []);\n  NavigationBar.setBackgroundColorAsync(\"black\");\n  return (\n    <GestureHandlerRootView\n      style={{\n        //flex: 1,\n        backgroundColor: \"red\",\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        flexDirection: \"row\",\n      }}>\n      <SafeAreaView style={styles.root}>\n        <StatusBar barStyle={\"light-content\"} backgroundColor={\"black\"} />\n        <Navigation />\n      </SafeAreaView>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  root: {\n    // flex: 1,\n    // maxWidth: 400,\n    width: \"100%\",\n    // height: \"100%\",\n    // marginTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\n    backgroundColor: myColors.pbgc,\n  },\n});\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/WhoCares.335a7108.png\";"],"sourceRoot":""}